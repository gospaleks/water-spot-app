<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/GoogleMapScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/GoogleMapScreen.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.map&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.offset&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.MyLocation&#10;import androidx.compose.material.icons.filled.Place&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExtendedFloatingActionButton&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.util.Pair&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.google.accompanist.permissions.ExperimentalPermissionsApi&#10;import com.google.accompanist.permissions.isGranted&#10;import com.google.accompanist.permissions.rememberPermissionState&#10;import com.google.android.gms.maps.CameraUpdateFactory&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory&#10;import com.google.android.gms.maps.model.LatLng&#10;import com.google.android.gms.maps.model.MapStyleOptions&#10;import com.google.maps.android.compose.GoogleMap&#10;import com.google.maps.android.compose.MapProperties&#10;import com.google.maps.android.compose.MapUiSettings&#10;import com.google.maps.android.compose.Marker&#10;import com.google.maps.android.compose.MarkerState&#10;import com.google.maps.android.compose.rememberCameraPositionState&#10;import kotlinx.coroutines.launch&#10;import kotlinx.serialization.builtins.PairSerializer&#10;import rs.gospaleks.waterspot.R&#10;import rs.gospaleks.waterspot.domain.model.CleanlinessLevelEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotTypeEnum&#10;import rs.gospaleks.waterspot.presentation.components.BasicTopAppBar&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.screens.map.components.CustomFABs&#10;import rs.gospaleks.waterspot.presentation.screens.map.components.MapTopAppBar&#10;import rs.gospaleks.waterspot.presentation.screens.map.components.PermissionDeniedPlaceholder&#10;import rs.gospaleks.waterspot.presentation.screens.map.components.SpotDetailsBottomSheet&#10;&#10;@OptIn(ExperimentalPermissionsApi::class, ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun GoogleMapScreen(&#10;    navigateToAddSpotScreen: () -&gt; Unit,&#10;    outerPadding: PaddingValues,&#10;    viewModel: MapViewModel = hiltViewModel()&#10;) {&#10;    val uiState = viewModel.uiState&#10;&#10;    val locationPermissionState = rememberPermissionState(Manifest.permission.ACCESS_FINE_LOCATION)&#10;    val cameraPositionState = rememberCameraPositionState()&#10;    val context = LocalContext.current&#10;    val isDarkTheme = isSystemInDarkTheme()&#10;    val mapStyleJson = if (isDarkTheme) {&#10;        MapStyleOptions.loadRawResourceStyle(LocalContext.current, R.raw.map_dark)&#10;    } else {&#10;        MapStyleOptions.loadRawResourceStyle(LocalContext.current, R.raw.map_light)&#10;    }&#10;&#10;    // Trazenje permisije i pokretanje lokacijskog servisa&#10;    LaunchedEffect(locationPermissionState.status) {&#10;        if (locationPermissionState.status.isGranted) {&#10;            // Dodatna sigurnost da je permisija stvarno data&#10;            if (ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {&#10;                viewModel.startLocationUpdates()&#10;            }&#10;        } else {&#10;            locationPermissionState.launchPermissionRequest()&#10;        }&#10;    }&#10;&#10;    // Centriraj kameru na trenutnu lokaciju samo pri ulasku u aplikaciju&#10;    // Kasnije kroz kretanje medju ekrane, view model cuva state&#10;    LaunchedEffect(uiState.location) {&#10;        if (uiState.location != null &amp;&amp; viewModel.shouldCenterMap()) {&#10;            cameraPositionState.move(&#10;                CameraUpdateFactory.newLatLngZoom(uiState.location!!, 16f)&#10;            )&#10;            viewModel.setCentered()&#10;        }&#10;    }&#10;&#10;    // Zaustavljanje azuriranja lokacije kada se ekran zatvori&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            viewModel.stopLocationUpdates()&#10;        }&#10;    }&#10;&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            MapTopAppBar()&#10;        },&#10;        floatingActionButton = {&#10;            CustomFABs(&#10;                outerPadding = outerPadding,&#10;                cameraReset = {&#10;                    uiState.location?.let { location -&gt;&#10;                        coroutineScope.launch {&#10;                            cameraPositionState.animate(&#10;                                CameraUpdateFactory.newLatLngZoom(location, 16f)&#10;                            )&#10;                        }&#10;                    }&#10;                },&#10;                navigateToAddSpotScreen = navigateToAddSpotScreen,&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding),&#10;            contentAlignment = Alignment.Center,&#10;        ) {&#10;            if (locationPermissionState.status.isGranted) {&#10;                GoogleMap(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    cameraPositionState = cameraPositionState,&#10;                    properties = MapProperties(&#10;                        mapStyleOptions = mapStyleJson,&#10;                        isMyLocationEnabled = uiState.isLocationPermissionGranted&#10;                    ),&#10;                    uiSettings = MapUiSettings(&#10;                        zoomControlsEnabled = false,&#10;                        myLocationButtonEnabled = false,&#10;                        compassEnabled = false,&#10;                    )&#10;                ) {&#10;                    uiState.spots.forEach { spot -&gt;&#10;                        Marker(&#10;                            state = MarkerState(&#10;                                position = LatLng(spot.latitude, spot.longitude),&#10;                            ),&#10;                            title = spot.type.toDisplayName(),&#10;                            snippet = spot.description ?: &quot;&quot;,&#10;                            icon = BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE),&#10;                            onClick = {&#10;                                viewModel.onMarkerClick(spot.id)&#10;                                true&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                if (uiState.isModalOpen) {&#10;                    SpotDetailsBottomSheet (&#10;                        spotDetails = uiState.selectedSpotDetails,&#10;                        isLoading = uiState.isSpotDetailsLoading,&#10;                        onDismiss = { viewModel.dismissBottomSheet() },&#10;                        onReportClick = { /* ... */ },&#10;                        onNavigateClick = { /* ... */ }&#10;                    )&#10;                }&#10;&#10;            } else {&#10;                PermissionDeniedPlaceholder()&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.map&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.offset&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.MyLocation&#10;import androidx.compose.material.icons.filled.Place&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExtendedFloatingActionButton&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.util.Pair&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.google.accompanist.permissions.ExperimentalPermissionsApi&#10;import com.google.accompanist.permissions.isGranted&#10;import com.google.accompanist.permissions.rememberPermissionState&#10;import com.google.android.gms.maps.CameraUpdateFactory&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory&#10;import com.google.android.gms.maps.model.LatLng&#10;import com.google.android.gms.maps.model.MapStyleOptions&#10;import com.google.maps.android.compose.GoogleMap&#10;import com.google.maps.android.compose.MapProperties&#10;import com.google.maps.android.compose.MapUiSettings&#10;import com.google.maps.android.compose.Marker&#10;import com.google.maps.android.compose.MarkerState&#10;import com.google.maps.android.compose.rememberCameraPositionState&#10;import kotlinx.coroutines.launch&#10;import kotlinx.serialization.builtins.PairSerializer&#10;import rs.gospaleks.waterspot.R&#10;import rs.gospaleks.waterspot.domain.model.CleanlinessLevelEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotTypeEnum&#10;import rs.gospaleks.waterspot.presentation.components.BasicTopAppBar&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.screens.map.components.CustomFABs&#10;import rs.gospaleks.waterspot.presentation.screens.map.components.MapTopAppBar&#10;import rs.gospaleks.waterspot.presentation.screens.map.components.PermissionDeniedPlaceholder&#10;import rs.gospaleks.waterspot.presentation.screens.map.components.SpotDetailsBottomSheet&#10;&#10;@OptIn(ExperimentalPermissionsApi::class, ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun GoogleMapScreen(&#10;    navigateToAddSpotScreen: () -&gt; Unit,&#10;    outerPadding: PaddingValues,&#10;    viewModel: MapViewModel = hiltViewModel()&#10;) {&#10;    val uiState = viewModel.uiState&#10;&#10;    val locationPermissionState = rememberPermissionState(Manifest.permission.ACCESS_FINE_LOCATION)&#10;    val cameraPositionState = rememberCameraPositionState()&#10;    val context = LocalContext.current&#10;    val isDarkTheme = isSystemInDarkTheme()&#10;    val mapStyleJson = if (isDarkTheme) {&#10;        MapStyleOptions.loadRawResourceStyle(LocalContext.current, R.raw.map_dark)&#10;    } else {&#10;        MapStyleOptions.loadRawResourceStyle(LocalContext.current, R.raw.map_light)&#10;    }&#10;&#10;    // Trazenje permisije i pokretanje lokacijskog servisa&#10;    LaunchedEffect(locationPermissionState.status) {&#10;        if (locationPermissionState.status.isGranted) {&#10;            // Dodatna sigurnost da je permisija stvarno data&#10;            if (ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {&#10;                viewModel.startLocationUpdates()&#10;            }&#10;        } else {&#10;            locationPermissionState.launchPermissionRequest()&#10;        }&#10;    }&#10;&#10;    // Centriraj kameru na trenutnu lokaciju samo pri ulasku u aplikaciju&#10;    // Kasnije kroz kretanje medju ekrane, view model cuva state&#10;    LaunchedEffect(uiState.location) {&#10;        if (uiState.location != null &amp;&amp; viewModel.shouldCenterMap()) {&#10;            cameraPositionState.move(&#10;                CameraUpdateFactory.newLatLngZoom(uiState.location!!, 16f)&#10;            )&#10;            viewModel.setCentered()&#10;        }&#10;    }&#10;&#10;    // Zaustavljanje azuriranja lokacije kada se ekran zatvori&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            viewModel.stopLocationUpdates()&#10;        }&#10;    }&#10;&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            MapTopAppBar()&#10;        },&#10;        floatingActionButton = {&#10;            CustomFABs(&#10;                outerPadding = outerPadding,&#10;                cameraReset = {&#10;                    uiState.location?.let { location -&gt;&#10;                        coroutineScope.launch {&#10;                            cameraPositionState.animate(&#10;                                CameraUpdateFactory.newLatLngZoom(location, 16f)&#10;                            )&#10;                        }&#10;                    }&#10;                },&#10;                navigateToAddSpotScreen = navigateToAddSpotScreen,&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding),&#10;            contentAlignment = Alignment.Center,&#10;        ) {&#10;            if (locationPermissionState.status.isGranted) {&#10;                GoogleMap(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    cameraPositionState = cameraPositionState,&#10;                    properties = MapProperties(&#10;                        mapStyleOptions = mapStyleJson,&#10;                        isMyLocationEnabled = uiState.isLocationPermissionGranted&#10;                    ),&#10;                    uiSettings = MapUiSettings(&#10;                        zoomControlsEnabled = false,&#10;                        myLocationButtonEnabled = false,&#10;                        compassEnabled = false,&#10;                    )&#10;                ) {&#10;                    uiState.spots.forEach { spot -&gt;&#10;                        Marker(&#10;                            state = MarkerState(&#10;                                position = LatLng(spot.latitude, spot.longitude),&#10;                            ),&#10;                            title = spot.type.toDisplayName(),&#10;                            snippet = spot.description ?: &quot;&quot;,&#10;                            icon = BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE),&#10;                            onClick = {&#10;                                viewModel.onMarkerClick(spot.id)&#10;                                true&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                if (uiState.isModalOpen) {&#10;                    SpotDetailsBottomSheet (&#10;                        spotDetails = uiState.selectedSpotDetails,&#10;                        isLoading = uiState.isSpotDetailsLoading,&#10;                        selectedSpotId = uiState.selectedSpotId,&#10;                        onDismiss = { viewModel.dismissBottomSheet() },&#10;                        onReportClick = { /* ... */ },&#10;                        onNavigateClick = { /* ... */ },&#10;                        onLoadSpotDetails = { spotId -&gt; viewModel.loadSpotDetails(spotId) }&#10;                    )&#10;                }&#10;&#10;            } else {&#10;                PermissionDeniedPlaceholder()&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/MapViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/MapViewModel.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.map&#10;&#10;import android.Manifest&#10;import android.os.Looper&#10;import android.util.Log&#10;import androidx.annotation.RequiresPermission&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.setValue&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.android.gms.location.FusedLocationProviderClient&#10;import com.google.android.gms.location.LocationCallback&#10;import com.google.android.gms.location.LocationRequest&#10;import com.google.android.gms.location.LocationResult&#10;import com.google.android.gms.location.Priority&#10;import com.google.android.gms.maps.model.LatLng&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.launch&#10;import rs.gospaleks.waterspot.domain.use_case.GetAllSpotsUseCase&#10;import rs.gospaleks.waterspot.domain.use_case.GetSpotDetailsUseCase&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class MapViewModel @Inject constructor(&#10;    private val fusedLocationClient: FusedLocationProviderClient,&#10;    private val getAllSpotsUseCase: GetAllSpotsUseCase,&#10;    private val getSpotDetailsUseCase: GetSpotDetailsUseCase,&#10;) : ViewModel() {&#10;&#10;    var uiState by mutableStateOf(MapUiState())&#10;        private set&#10;&#10;    private var hasCenteredMap = false&#10;&#10;    private val locationRequest = LocationRequest.Builder(3000L)&#10;        .setMinUpdateIntervalMillis(2000L)&#10;        .setPriority(Priority.PRIORITY_HIGH_ACCURACY)&#10;        .build()&#10;&#10;    private val locationCallback = object : LocationCallback() {&#10;        override fun onLocationResult(result: LocationResult) {&#10;            result.lastLocation?.let {&#10;                val newLocation = LatLng(it.latitude, it.longitude)&#10;                uiState = uiState.copy(&#10;                    location = newLocation,&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    init {&#10;        observeSpots()&#10;    }&#10;&#10;    private fun observeSpots() = viewModelScope.launch {&#10;        uiState = uiState.copy(isLoadingSpots = true)&#10;&#10;        getAllSpotsUseCase().collect { result -&gt;&#10;            result&#10;                .onSuccess { spots -&gt;&#10;                    uiState = uiState.copy(&#10;                        spots = spots,&#10;                        isLoadingSpots = false,&#10;                        error = null&#10;                    )&#10;                }&#10;                .onFailure { error -&gt;&#10;                    uiState = uiState.copy(&#10;                        isLoadingSpots = false,&#10;                        error = error.message ?: &quot;Unknown error&quot;&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    fun onMarkerClick(spotId: String) {&#10;        uiState = uiState.copy(&#10;            isModalOpen = true,&#10;            selectedSpotId = spotId, // Dodaj ovo u UiState&#10;            selectedSpotDetails = null,&#10;            error = null,&#10;        )&#10;    }&#10;&#10;    fun loadSpotDetails(spotId: String) = viewModelScope.launch {&#10;        getSpotDetailsUseCase(spotId).onSuccess { spotDetails -&gt;&#10;            uiState = uiState.copy(&#10;                isSpotDetailsLoading = false,&#10;                isModalOpen = true,&#10;                selectedSpotDetails = spotDetails,&#10;                error = null,&#10;            )&#10;        }.onFailure { error -&gt;&#10;            uiState = uiState.copy(&#10;                isSpotDetailsLoading = false,&#10;                isModalOpen = false,&#10;                selectedSpotDetails = null,&#10;                error = error.message ?: &quot;Unknown error&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    fun dismissBottomSheet() {&#10;        uiState = uiState.copy(&#10;            isModalOpen = false,&#10;            isSpotDetailsLoading = false,&#10;            selectedSpotDetails = null,&#10;            error = null&#10;        )&#10;    }&#10;&#10;    @RequiresPermission(allOf = [Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION])&#10;    fun startLocationUpdates() {&#10;        fusedLocationClient.requestLocationUpdates(&#10;            locationRequest,&#10;            locationCallback,&#10;            Looper.getMainLooper()&#10;        )&#10;&#10;        uiState = uiState.copy(&#10;            isLocationPermissionGranted = true&#10;        )&#10;    }&#10;&#10;    fun stopLocationUpdates() {&#10;        fusedLocationClient.removeLocationUpdates(locationCallback)&#10;    }&#10;&#10;    fun shouldCenterMap(): Boolean {&#10;        return !hasCenteredMap&#10;    }&#10;&#10;    fun setCentered() {&#10;        hasCenteredMap = true&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.map&#10;&#10;import android.Manifest&#10;import android.os.Looper&#10;import androidx.annotation.RequiresPermission&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.setValue&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.android.gms.location.FusedLocationProviderClient&#10;import com.google.android.gms.location.LocationCallback&#10;import com.google.android.gms.location.LocationRequest&#10;import com.google.android.gms.location.LocationResult&#10;import com.google.android.gms.location.Priority&#10;import com.google.android.gms.maps.model.LatLng&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.launch&#10;import rs.gospaleks.waterspot.domain.use_case.GetAllSpotsUseCase&#10;import rs.gospaleks.waterspot.domain.use_case.GetSpotDetailsUseCase&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class MapViewModel @Inject constructor(&#10;    private val fusedLocationClient: FusedLocationProviderClient,&#10;    private val getAllSpotsUseCase: GetAllSpotsUseCase,&#10;    private val getSpotDetailsUseCase: GetSpotDetailsUseCase,&#10;) : ViewModel() {&#10;&#10;    var uiState by mutableStateOf(MapUiState())&#10;        private set&#10;&#10;    private var hasCenteredMap = false&#10;&#10;    private val locationRequest = LocationRequest.Builder(3000L)&#10;        .setMinUpdateIntervalMillis(2000L)&#10;        .setPriority(Priority.PRIORITY_HIGH_ACCURACY)&#10;        .build()&#10;&#10;    private val locationCallback = object : LocationCallback() {&#10;        override fun onLocationResult(result: LocationResult) {&#10;            result.lastLocation?.let {&#10;                val newLocation = LatLng(it.latitude, it.longitude)&#10;                uiState = uiState.copy(&#10;                    location = newLocation,&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    init {&#10;        observeSpots()&#10;    }&#10;&#10;    private fun observeSpots() = viewModelScope.launch {&#10;        uiState = uiState.copy(isLoadingSpots = true)&#10;&#10;        getAllSpotsUseCase().collect { result -&gt;&#10;            result&#10;                .onSuccess { spots -&gt;&#10;                    uiState = uiState.copy(&#10;                        spots = spots,&#10;                        isLoadingSpots = false,&#10;                        error = null&#10;                    )&#10;                }&#10;                .onFailure { error -&gt;&#10;                    uiState = uiState.copy(&#10;                        isLoadingSpots = false,&#10;                        error = error.message ?: &quot;Unknown error&quot;&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    fun onMarkerClick(spotId: String) {&#10;        uiState = uiState.copy(&#10;            isModalOpen = true,&#10;            selectedSpotId = spotId,&#10;            selectedSpotDetails = null,&#10;            isSpotDetailsLoading = true,&#10;            error = null,&#10;        )&#10;        // Ne pozivamo loadSpotDetails ovde - bottom sheet će to uraditi&#10;    }&#10;&#10;    fun loadSpotDetails(spotId: String) = viewModelScope.launch {&#10;        getSpotDetailsUseCase(spotId).onSuccess { spotDetails -&gt;&#10;            uiState = uiState.copy(&#10;                isSpotDetailsLoading = false,&#10;                isModalOpen = true,&#10;                selectedSpotDetails = spotDetails,&#10;                error = null,&#10;            )&#10;        }.onFailure { error -&gt;&#10;            uiState = uiState.copy(&#10;                isSpotDetailsLoading = false,&#10;                isModalOpen = false,&#10;                selectedSpotDetails = null,&#10;                error = error.message ?: &quot;Unknown error&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    fun dismissBottomSheet() {&#10;        uiState = uiState.copy(&#10;            isModalOpen = false,&#10;            isSpotDetailsLoading = false,&#10;            selectedSpotDetails = null,&#10;            error = null&#10;        )&#10;    }&#10;&#10;    @RequiresPermission(allOf = [Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION])&#10;    fun startLocationUpdates() {&#10;        fusedLocationClient.requestLocationUpdates(&#10;            locationRequest,&#10;            locationCallback,&#10;            Looper.getMainLooper()&#10;        )&#10;&#10;        uiState = uiState.copy(&#10;            isLocationPermissionGranted = true&#10;        )&#10;    }&#10;&#10;    fun stopLocationUpdates() {&#10;        fusedLocationClient.removeLocationUpdates(locationCallback)&#10;    }&#10;&#10;    fun shouldCenterMap(): Boolean {&#10;        return !hasCenteredMap&#10;    }&#10;&#10;    fun setCentered() {&#10;        hasCenteredMap = true&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.domain.model.User&#10;import rs.gospaleks.waterspot.presentation.components.CleanlinessChip&#10;import rs.gospaleks.waterspot.presentation.components.formatDate&#10;import rs.gospaleks.waterspot.R&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    selectedSpotId: String? = null,&#10;    onDismiss: () -&gt; Unit,&#10;    onReportClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onLoadSpotDetails: (String) -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    LaunchedEffect(selectedSpotId) {&#10;        selectedSpotId?.let { spotId -&gt;&#10;            // Mala pauza da se animacija otvaranja završi&#10;            delay(300) // 300ms delay&#10;            onLoadSpotDetails(spotId)&#10;        }&#10;    }&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading || spotDetails == null) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .height(400.dp)&#10;                        .fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center,&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                SpotDetailsContent(&#10;                    spotDetails = spotDetails,&#10;                    onNavigateClick = onNavigateClick,&#10;                    onReportClick = onReportClick,&#10;                    onUserProfileClick = onUserProfileClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotDetailsContent(&#10;    spotDetails: SpotDetails,&#10;    onReportClick: () -&gt; Unit = {},&#10;    onNavigateClick: () -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Photo&#10;        spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;            AsyncImage(&#10;                model = photoUrl,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .aspectRatio(4f / 3f)&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Content section - redesigned layout&#10;&#10;        // Header with type and date&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Type with icon&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = spotDetails.spot.type.icon(),&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;&#10;            // Creation date&#10;            if (spotDetails.spot.createdAt != null) {&#10;                Text(&#10;                    text = formatDate(spotDetails.spot.createdAt),&#10;                    style = MaterialTheme.typography.labelMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        // Cleanliness chip&#10;        CleanlinessChip(&#10;            cleanliness = spotDetails.spot.cleanliness,&#10;            modifier = Modifier.wrapContentWidth()&#10;        )&#10;&#10;        // Description&#10;        spotDetails.spot.description?.let { description -&gt;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Card(&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceContainerLow&#10;                ),&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.spot_details_description_label),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = description,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Clickable user info&#10;        spotDetails.user?.let { user -&gt;&#10;            PostedByCard(user, onUserProfileClick)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Action buttons&#10;        ActionsButtons(&#10;            onNavigateClick = onNavigateClick,&#10;            onReportClick = onReportClick&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PostedByCard(&#10;    user: User,&#10;    onUserProfileClick: () -&gt; Unit,&#10;) {&#10;    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;    Card(&#10;        onClick = onUserProfileClick,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            AsyncImage(&#10;                model = user.profilePictureUrl,&#10;                contentDescription = &quot;Profile picture&quot;,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = stringResource(R.string.spot_details_posted_by),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = user.fullName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionsButtons(&#10;    onNavigateClick: () -&gt; Unit,&#10;    onReportClick: () -&gt; Unit,&#10;) {&#10;    Row(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Button(&#10;            onClick = onNavigateClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Navigation,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&quot;Navigate&quot;)&#10;        }&#10;&#10;        OutlinedButton(&#10;            onClick = onReportClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Outlined.Report,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&quot;Report&quot;)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.domain.model.User&#10;import rs.gospaleks.waterspot.presentation.components.CleanlinessChip&#10;import rs.gospaleks.waterspot.presentation.components.formatDate&#10;import rs.gospaleks.waterspot.R&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    selectedSpotId: String? = null,&#10;    onDismiss: () -&gt; Unit,&#10;    onReportClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onLoadSpotDetails: (String) -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    LaunchedEffect(selectedSpotId) {&#10;        selectedSpotId?.let { spotId -&gt;&#10;            // Mala pauza da se animacija otvaranja završi&#10;            delay(300) // 300ms delay&#10;            onLoadSpotDetails(spotId)&#10;        }&#10;    }&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading || spotDetails == null) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight(0.5f)&#10;                        .fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center,&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                SpotDetailsContent(&#10;                    spotDetails = spotDetails,&#10;                    onNavigateClick = onNavigateClick,&#10;                    onReportClick = onReportClick,&#10;                    onUserProfileClick = onUserProfileClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotDetailsContent(&#10;    spotDetails: SpotDetails,&#10;    onReportClick: () -&gt; Unit = {},&#10;    onNavigateClick: () -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Photo&#10;        spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;            AsyncImage(&#10;                model = photoUrl,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .aspectRatio(4f / 3f)&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Content section - redesigned layout&#10;&#10;        // Header with type and date&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Type with icon&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = spotDetails.spot.type.icon(),&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;&#10;            // Creation date&#10;            if (spotDetails.spot.createdAt != null) {&#10;                Text(&#10;                    text = formatDate(spotDetails.spot.createdAt),&#10;                    style = MaterialTheme.typography.labelMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        // Cleanliness chip&#10;        CleanlinessChip(&#10;            cleanliness = spotDetails.spot.cleanliness,&#10;            modifier = Modifier.wrapContentWidth()&#10;        )&#10;&#10;        // Description&#10;        spotDetails.spot.description?.let { description -&gt;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Card(&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceContainerLow&#10;                ),&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.spot_details_description_label),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = description,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Clickable user info&#10;        spotDetails.user?.let { user -&gt;&#10;            PostedByCard(user, onUserProfileClick)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Action buttons&#10;        ActionsButtons(&#10;            onNavigateClick = onNavigateClick,&#10;            onReportClick = onReportClick&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PostedByCard(&#10;    user: User,&#10;    onUserProfileClick: () -&gt; Unit,&#10;) {&#10;    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;    Card(&#10;        onClick = onUserProfileClick,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            AsyncImage(&#10;                model = user.profilePictureUrl,&#10;                contentDescription = &quot;Profile picture&quot;,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = stringResource(R.string.spot_details_posted_by),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = user.fullName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionsButtons(&#10;    onNavigateClick: () -&gt; Unit,&#10;    onReportClick: () -&gt; Unit,&#10;) {&#10;    Row(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Button(&#10;            onClick = onNavigateClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Navigation,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&quot;Navigate&quot;)&#10;        }&#10;&#10;        OutlinedButton(&#10;            onClick = onReportClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Outlined.Report,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&quot;Report&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>