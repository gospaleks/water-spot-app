<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.filled.ZoomIn&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.window.DialogProperties&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onReportClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        if (isLoading) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else if (spotDetails != null) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;            ) {&#10;                // Photo&#10;                spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;                        AsyncImage(&#10;                            model = photoUrl,&#10;                            contentDescription = null,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .heightIn(max = 140.dp)&#10;                                .aspectRatio(4f / 3f)&#10;                                .clip(RoundedCornerShape(16.dp)),&#10;                            contentScale = ContentScale.Crop&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;&#10;                // Content section&#10;&#10;                // Type and cleanliness&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                    ),&#10;                    modifier = Modifier.wrapContentSize()&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Cleanliness: ${spotDetails.spot.cleanliness.toDisplayName()}&quot;,&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;&#10;                // Description&#10;                spotDetails.spot.description?.let { description -&gt;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    Text(&#10;                        text = description,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                // Clickable user info&#10;                spotDetails.user?.let { user -&gt;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Card(&#10;                        onClick = onUserProfileClick,&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;                        ),&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            modifier = Modifier.padding(12.dp)&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = user.profilePictureUrl,&#10;                                contentDescription = &quot;Profile picture&quot;,&#10;                                modifier = Modifier&#10;                                    .size(48.dp)&#10;                                    .clip(CircleShape),&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Column {&#10;                                Text(&#10;                                    text = &quot;Posted by&quot;,&#10;                                    style = MaterialTheme.typography.labelSmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Text(&#10;                                    text = user.fullName,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = MaterialTheme.colorScheme.onSurface&#10;                                )&#10;                            }&#10;                            Spacer(modifier = Modifier.weight(1f))&#10;                            Icon(&#10;                                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                // Action buttons&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Button(&#10;                        onClick = onNavigateClick,&#10;                        modifier = Modifier.weight(1f),&#10;                        contentPadding = PaddingValues(vertical = 12.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Navigation,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&quot;Navigate&quot;)&#10;                    }&#10;&#10;                    OutlinedButton(&#10;                        onClick = onReportClick,&#10;                        modifier = Modifier.weight(1f),&#10;                        contentPadding = PaddingValues(vertical = 12.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Outlined.Report,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&quot;Report&quot;)&#10;                    }&#10;                }&#10;&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.filled.ZoomIn&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.window.DialogProperties&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onReportClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        if (isLoading) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else if (spotDetails != null) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;            ) {&#10;                // Photo&#10;                spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;                    AsyncImage(&#10;                        model = photoUrl,&#10;                        contentDescription = null,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .heightIn(max = 140.dp)&#10;                            .aspectRatio(4f / 3f)&#10;                            .clip(RoundedCornerShape(16.dp)),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;&#10;                // Content section&#10;&#10;                // Type and cleanliness&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                    ),&#10;                    modifier = Modifier.wrapContentSize()&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Cleanliness: ${spotDetails.spot.cleanliness.toDisplayName()}&quot;,&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                    )&#10;                }&#10;&#10;                // Description&#10;                spotDetails.spot.description?.let { description -&gt;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    Text(&#10;                        text = description,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                // Clickable user info&#10;                spotDetails.user?.let { user -&gt;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Card(&#10;                        onClick = onUserProfileClick,&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;                        ),&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            modifier = Modifier.padding(12.dp)&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = user.profilePictureUrl,&#10;                                contentDescription = &quot;Profile picture&quot;,&#10;                                modifier = Modifier&#10;                                    .size(48.dp)&#10;                                    .clip(CircleShape),&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Column {&#10;                                Text(&#10;                                    text = &quot;Posted by&quot;,&#10;                                    style = MaterialTheme.typography.labelSmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Text(&#10;                                    text = user.fullName,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = MaterialTheme.colorScheme.onSurface&#10;                                )&#10;                            }&#10;                            Spacer(modifier = Modifier.weight(1f))&#10;                            Icon(&#10;                                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                // Action buttons&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Button(&#10;                        onClick = onNavigateClick,&#10;                        modifier = Modifier.weight(1f),&#10;                        contentPadding = PaddingValues(vertical = 12.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Navigation,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&quot;Navigate&quot;)&#10;                    }&#10;&#10;                    OutlinedButton(&#10;                        onClick = onReportClick,&#10;                        modifier = Modifier.weight(1f),&#10;                        contentPadding = PaddingValues(vertical = 12.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Outlined.Report,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&quot;Report&quot;)&#10;                    }&#10;                }&#10;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>