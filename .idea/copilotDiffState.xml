<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/all_spots/AllSpotsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/all_spots/AllSpotsScreen.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.all_spots&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.FastOutSlowInEasing&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.outlined.WaterDrop&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.LayoutDirection&#10;import rs.gospaleks.waterspot.presentation.components.card.SpotCard&#10;import rs.gospaleks.waterspot.presentation.components.bottom_sheet.SpotDetailsBottomSheet&#10;import rs.gospaleks.waterspot.presentation.components.bottom_sheet.SpotDetailsBottomSheetViewModel&#10;import rs.gospaleks.waterspot.R&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;&#10;@Composable&#10;fun AllSpotsScreen(&#10;    outerPadding: PaddingValues,&#10;    viewModel: AllSpotsViewModel = hiltViewModel()&#10;) {&#10;    val bottomSheetViewModel: SpotDetailsBottomSheetViewModel = hiltViewModel()&#10;&#10;    val uiState = viewModel.uiState&#10;&#10;    Column (&#10;        modifier = Modifier&#10;            .padding(bottom = outerPadding.calculateBottomPadding())&#10;            .fillMaxSize(),&#10;        verticalArrangement = Arrangement.Top,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        SearchAndFilter(&#10;            textFieldState = viewModel.textFieldState,&#10;            searchResults = uiState.filteredSpots.map { it.spot.type.toDisplayName() },&#10;            selectedTypes = uiState.selectedTypeFilters,&#10;            onToggleType = viewModel::toggleTypeFilter,&#10;            selectedCleanliness = uiState.selectedCleanlinessFilters,&#10;            onToggleCleanliness = viewModel::toggleCleanlinessFilter,&#10;            radiusKm = uiState.radiusKm,&#10;            onRadiusChange = viewModel::updateRadiusKm,&#10;            onRadiusChangeFinished = viewModel::applyRadiusChange,&#10;            onQueryChange = viewModel::setSearchQuery,&#10;        )&#10;&#10;        // Content area (list/loading/empty)&#10;        when {&#10;            uiState.isLoading -&gt; {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .weight(1f)&#10;                        .padding(outerPadding),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            }&#10;            uiState.allSpots.isEmpty() -&gt; {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .weight(1f)&#10;                        .padding(outerPadding),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Outlined.WaterDrop,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(48.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Text(&#10;                            text = stringResource(R.string.all_spots_empty_message),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            else -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .padding(horizontal = outerPadding.calculateStartPadding(LayoutDirection.Ltr)),&#10;                    verticalArrangement = Arrangement.spacedBy(4.dp),&#10;                ) {&#10;                    items(&#10;                        items = uiState.filteredSpots,&#10;                        key = { it.spot.id }&#10;                    ) { spotWithUser -&gt;&#10;                        val index = uiState.filteredSpots.indexOf(spotWithUser)&#10;&#10;                        SpotCard(&#10;                            spotWithUser = spotWithUser,&#10;                            modifier = (if (index == 0) Modifier.padding(top = 8.dp) else Modifier).animateItem(),&#10;                            onCardClick = {&#10;                                bottomSheetViewModel.onSpotClick(spotWithUser)&#10;                            },&#10;                            onUserClick = { userId -&gt;&#10;                                // TODO: Navigiraj do profila korisnika&#10;                            },&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    SpotDetailsBottomSheet(viewModel = bottomSheetViewModel)&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.all_spots&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.outlined.WaterDrop&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.LayoutDirection&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import rs.gospaleks.waterspot.presentation.components.card.SpotCard&#10;import rs.gospaleks.waterspot.presentation.components.bottom_sheet.SpotDetailsBottomSheet&#10;import rs.gospaleks.waterspot.presentation.components.bottom_sheet.SpotDetailsBottomSheetViewModel&#10;import rs.gospaleks.waterspot.R&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import androidx.compose.animation.animateContentSize&#10;&#10;@Composable&#10;fun AllSpotsScreen(&#10;    outerPadding: PaddingValues,&#10;    viewModel: AllSpotsViewModel = hiltViewModel()&#10;) {&#10;    val bottomSheetViewModel: SpotDetailsBottomSheetViewModel = hiltViewModel()&#10;&#10;    val uiState = viewModel.uiState&#10;&#10;    Column (&#10;        modifier = Modifier&#10;            .padding(bottom = outerPadding.calculateBottomPadding())&#10;            .fillMaxSize(),&#10;        verticalArrangement = Arrangement.Top,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        SearchAndFilter(&#10;            textFieldState = viewModel.textFieldState,&#10;            searchResults = uiState.filteredSpots.map { it.spot.type.toDisplayName() },&#10;            selectedTypes = uiState.selectedTypeFilters,&#10;            onToggleType = viewModel::toggleTypeFilter,&#10;            selectedCleanliness = uiState.selectedCleanlinessFilters,&#10;            onToggleCleanliness = viewModel::toggleCleanlinessFilter,&#10;            radiusKm = uiState.radiusKm,&#10;            onRadiusChange = viewModel::updateRadiusKm,&#10;            onRadiusChangeFinished = viewModel::applyRadiusChange,&#10;            onQueryChange = viewModel::setSearchQuery,&#10;        )&#10;&#10;        // Content area (list/loading/empty)&#10;        when {&#10;            uiState.isLoading -&gt; {&#10;                // Shimmer skeleton list&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .weight(1f),&#10;                    verticalArrangement = Arrangement.spacedBy(4.dp),&#10;                    contentPadding = PaddingValues(vertical = 8.dp)&#10;                ) {&#10;                    items(6) { index -&gt;&#10;                        ShimmerSpotCardPlaceholder(modifier = if (index == 0) Modifier.padding(top = 8.dp) else Modifier)&#10;                    }&#10;                }&#10;            }&#10;            uiState.allSpots.isEmpty() -&gt; {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .weight(1f)&#10;                        .padding(outerPadding),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Outlined.WaterDrop,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(48.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Text(&#10;                            text = stringResource(R.string.all_spots_empty_message),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            else -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .padding(horizontal = outerPadding.calculateStartPadding(LayoutDirection.Ltr)),&#10;                    verticalArrangement = Arrangement.spacedBy(4.dp),&#10;                ) {&#10;                    items(&#10;                        items = uiState.filteredSpots,&#10;                        key = { it.spot.id }&#10;                    ) { spotWithUser -&gt;&#10;                        val index = uiState.filteredSpots.indexOf(spotWithUser)&#10;                        val visible = remember(spotWithUser.spot.id) { mutableStateOf(false) }&#10;                        LaunchedEffect(spotWithUser.spot.id) { visible.value = true }&#10;&#10;                        AnimatedVisibility(&#10;                            visible = visible.value,&#10;                            enter = fadeIn(animationSpec = tween(180, easing = FastOutSlowInEasing)) +&#10;                                    expandVertically(animationSpec = tween(180, easing = FastOutSlowInEasing)),&#10;                            exit = fadeOut(animationSpec = tween(120, easing = FastOutSlowInEasing)) +&#10;                                    shrinkVertically(animationSpec = tween(120, easing = FastOutSlowInEasing))&#10;                        ) {&#10;                            SpotCard(&#10;                                spotWithUser = spotWithUser,&#10;                                modifier = (if (index == 0) Modifier.padding(top = 8.dp) else Modifier)&#10;                                    .animateContentSize(),&#10;                                onCardClick = {&#10;                                    bottomSheetViewModel.onSpotClick(spotWithUser)&#10;                                },&#10;                                onUserClick = { userId -&gt;&#10;                                    // TODO: Navigiraj do profila korisnika&#10;                                },&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    SpotDetailsBottomSheet(viewModel = bottomSheetViewModel)&#10;}&#10;&#10;@Composable&#10;private fun rememberShimmerBrush(): Brush {&#10;    val transition = rememberInfiniteTransition(label = &quot;shimmer&quot;)&#10;    val translate by transition.animateFloat(&#10;        initialValue = 0f,&#10;        targetValue = 1000f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(durationMillis = 1000, easing = LinearEasing),&#10;            repeatMode = RepeatMode.Restart&#10;        ),&#10;        label = &quot;shimmerTranslate&quot;&#10;    )&#10;    val base = MaterialTheme.colorScheme.surfaceVariant&#10;    val highlight = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.10f)&#10;&#10;    return Brush.linearGradient(&#10;        colors = listOf(base.copy(alpha = 0.6f), highlight, base.copy(alpha = 0.6f)),&#10;        start = Offset(translate - 200f, 0f),&#10;        end = Offset(translate, 0f)&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun ShimmerSpotCardPlaceholder(modifier: Modifier = Modifier) {&#10;    val shimmer = rememberShimmerBrush()&#10;    val shape = RoundedCornerShape(16.dp)&#10;&#10;    Row(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 24.dp, vertical = 8.dp)&#10;            .clip(shape)&#10;            .background(MaterialTheme.colorScheme.surfaceContainer)&#10;            .height(110.dp)&#10;            .padding(12.dp)&#10;    ) {&#10;        // Left image placeholder&#10;        Box(&#10;            modifier = Modifier&#10;                .width(110.dp)&#10;                .fillMaxHeight()&#10;                .clip(RoundedCornerShape(12.dp))&#10;                .background(shimmer)&#10;        )&#10;&#10;        Spacer(Modifier.width(12.dp))&#10;&#10;        // Right content placeholders&#10;        Column(modifier = Modifier.fillMaxHeight().weight(1f)) {&#10;            // Title row placeholder&#10;            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .height(16.dp)&#10;                        .width(120.dp)&#10;                        .clip(RoundedCornerShape(6.dp))&#10;                        .background(shimmer)&#10;                )&#10;                Box(&#10;                    modifier = Modifier&#10;                        .height(16.dp)&#10;                        .width(70.dp)&#10;                        .clip(RoundedCornerShape(6.dp))&#10;                        .background(shimmer)&#10;                )&#10;            }&#10;&#10;            Spacer(Modifier.height(12.dp))&#10;&#10;            // Second line placeholder&#10;            Box(&#10;                modifier = Modifier&#10;                    .height(12.dp)&#10;                    .fillMaxWidth(0.7f)&#10;                    .clip(RoundedCornerShape(6.dp))&#10;                    .background(shimmer)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.weight(1f))&#10;&#10;            // Footer row placeholder&#10;            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .height(12.dp)&#10;                        .width(100.dp)&#10;                        .clip(RoundedCornerShape(6.dp))&#10;                        .background(shimmer)&#10;                )&#10;                Box(&#10;                    modifier = Modifier&#10;                        .height(12.dp)&#10;                        .width(60.dp)&#10;                        .clip(RoundedCornerShape(6.dp))&#10;                        .background(shimmer)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/all_spots/AllSpotsViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/all_spots/AllSpotsViewModel.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.all_spots&#10;&#10;import android.Manifest&#10;import androidx.annotation.RequiresPermission&#10;import androidx.compose.foundation.text.input.TextFieldState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.android.gms.location.FusedLocationProviderClient&#10;import com.google.android.gms.maps.model.LatLng&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.launch&#10;import rs.gospaleks.waterspot.domain.model.SpotWithUser&#10;import rs.gospaleks.waterspot.domain.use_case.GetAllSpotsWithUserUseCase&#10;import rs.gospaleks.waterspot.domain.use_case.LocationTrackingUseCase&#10;import javax.inject.Inject&#10;&#10;data class AllSpotsUiState(&#10;    val isLoading: Boolean = false,&#10;    val spotsWithUser: List&lt;SpotWithUser&gt; = emptyList(),&#10;    val error: String? = null&#10;)&#10;&#10;@HiltViewModel&#10;class AllSpotsViewModel @Inject constructor(&#10;    private val getAllSpotsWithUserUseCase: GetAllSpotsWithUserUseCase,&#10;    private val locationTrackingUseCase: LocationTrackingUseCase&#10;) : ViewModel() {&#10;    var uiState by mutableStateOf(AllSpotsUiState())&#10;        private set&#10;&#10;    var textFieldState by mutableStateOf(TextFieldState())&#10;&#10;    private var currLocation: LatLng = LatLng(0.0, 0.0)&#10;&#10;    init {&#10;        currLocation = locationTrackingUseCase.currentLocation.value ?: currLocation&#10;&#10;        observeSpots()&#10;    }&#10;&#10;    private fun observeSpots() = viewModelScope.launch {&#10;        uiState = uiState.copy(isLoading = true)&#10;&#10;        getAllSpotsWithUserUseCase(currLocation.latitude, currLocation.longitude).collect { result -&gt;&#10;            result&#10;                .onSuccess { spots -&gt;&#10;                    uiState = uiState.copy(&#10;                        spotsWithUser = spots,&#10;                        isLoading = false,&#10;                        error = null&#10;                    )&#10;                }&#10;                .onFailure { error -&gt;&#10;                    uiState = uiState.copy(&#10;                        isLoading = false,&#10;                        spotsWithUser = emptyList(),&#10;                        error = error.message ?: &quot;Unknown error&quot;&#10;                    )&#10;                }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.all_spots&#10;&#10;import androidx.compose.foundation.text.input.TextFieldState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.android.gms.maps.model.LatLng&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.launch&#10;import rs.gospaleks.waterspot.domain.model.CleanlinessLevelEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotTypeEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotWithUser&#10;import rs.gospaleks.waterspot.domain.use_case.GetAllSpotsWithUserUseCase&#10;import rs.gospaleks.waterspot.domain.use_case.LocationTrackingUseCase&#10;import javax.inject.Inject&#10;&#10;data class AllSpotsUiState(&#10;    val isLoading: Boolean = false,&#10;    // Full list fetched from the backend for the current radius&#10;    val allSpots: List&lt;SpotWithUser&gt; = emptyList(),&#10;    // List after applying local filters and search&#10;    val filteredSpots: List&lt;SpotWithUser&gt; = emptyList(),&#10;    // Filters&#10;    val selectedTypeFilters: Set&lt;SpotTypeEnum&gt; = emptySet(),&#10;    val selectedCleanlinessFilters: Set&lt;CleanlinessLevelEnum&gt; = emptySet(),&#10;    val searchQuery: String = &quot;&quot;,&#10;    // Radius in kilometers (default 30 km)&#10;    val radiusKm: Int = 30,&#10;    val error: String? = null&#10;)&#10;&#10;@HiltViewModel&#10;class AllSpotsViewModel @Inject constructor(&#10;    private val getAllSpotsWithUserUseCase: GetAllSpotsWithUserUseCase,&#10;    private val locationTrackingUseCase: LocationTrackingUseCase&#10;) : ViewModel() {&#10;    var uiState by mutableStateOf(AllSpotsUiState())&#10;        private set&#10;&#10;    var textFieldState by mutableStateOf(TextFieldState())&#10;&#10;    private var currLocation: LatLng = LatLng(0.0, 0.0)&#10;    private var observeJob: Job? = null&#10;&#10;    init {&#10;        currLocation = locationTrackingUseCase.currentLocation.value ?: currLocation&#10;        // Initial fetch with default radius&#10;        observeSpots(radiusKm = uiState.radiusKm)&#10;    }&#10;&#10;    // Public API to update filters/search&#10;    fun toggleTypeFilter(type: SpotTypeEnum) {&#10;        val newSet = uiState.selectedTypeFilters.toMutableSet().apply {&#10;            if (contains(type)) remove(type) else add(type)&#10;        }.toSet()&#10;        uiState = uiState.copy(selectedTypeFilters = newSet)&#10;        applyFilters()&#10;    }&#10;&#10;    fun toggleCleanlinessFilter(level: CleanlinessLevelEnum) {&#10;        val newSet = uiState.selectedCleanlinessFilters.toMutableSet().apply {&#10;            if (contains(level)) remove(level) else add(level)&#10;        }.toSet()&#10;        uiState = uiState.copy(selectedCleanlinessFilters = newSet)&#10;        applyFilters()&#10;    }&#10;&#10;    fun setSearchQuery(query: String) {&#10;        uiState = uiState.copy(searchQuery = query)&#10;        applyFilters()&#10;    }&#10;&#10;    // Called while the slider moves (do not re-fetch)&#10;    fun updateRadiusKm(km: Int) {&#10;        if (km != uiState.radiusKm) {&#10;            uiState = uiState.copy(radiusKm = km)&#10;        }&#10;    }&#10;&#10;    // Call this when user releases the slider to re-fetch data for the new radius&#10;    fun applyRadiusChange() {&#10;        observeSpots(radiusKm = uiState.radiusKm)&#10;    }&#10;&#10;    private fun observeSpots(radiusKm: Int) {&#10;        observeJob?.cancel()&#10;        observeJob = viewModelScope.launch {&#10;            uiState = uiState.copy(isLoading = true)&#10;&#10;            val radiusMeters = radiusKm * 1000.0&#10;            getAllSpotsWithUserUseCase(currLocation.latitude, currLocation.longitude, radiusMeters).collect { result -&gt;&#10;                result&#10;                    .onSuccess { spots -&gt;&#10;                        uiState = uiState.copy(&#10;                            allSpots = spots,&#10;                            isLoading = false,&#10;                            error = null&#10;                        )&#10;                        applyFilters()&#10;                    }&#10;                    .onFailure { error -&gt;&#10;                        uiState = uiState.copy(&#10;                            isLoading = false,&#10;                            allSpots = emptyList(),&#10;                            filteredSpots = emptyList(),&#10;                            error = error.message ?: &quot;Unknown error&quot;&#10;                        )&#10;                    }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun applyFilters() {&#10;        val query = uiState.searchQuery.trim().lowercase()&#10;        val types = uiState.selectedTypeFilters&#10;        val cleanliness = uiState.selectedCleanlinessFilters&#10;&#10;        val filtered = uiState.allSpots.filter { item -&gt;&#10;            val spot = item.spot&#10;            // Type filter (if set)&#10;            val typeOk = if (types.isEmpty()) true else types.contains(spot.type)&#10;            // Cleanliness filter (if set)&#10;            val cleanlinessOk = if (cleanliness.isEmpty()) true else cleanliness.contains(spot.cleanliness)&#10;&#10;            val searchOk = if (query.isEmpty()) true else run {&#10;                val haystack = buildString {&#10;                    append(spot.description ?: &quot;&quot;)&#10;                    append(' ')&#10;                    append(spot.type.name)&#10;                    append(' ')&#10;                    append(spot.cleanliness.name)&#10;                    append(' ')&#10;                    append(item.user?.fullName ?: &quot;&quot;)&#10;                }.lowercase()&#10;                haystack.contains(query)&#10;            }&#10;&#10;            typeOk &amp;&amp; cleanlinessOk &amp;&amp; searchOk&#10;        }&#10;&#10;        uiState = uiState.copy(filteredSpots = filtered)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/all_spots/SearchAndFilter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/all_spots/SearchAndFilter.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.all_spots&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.FastOutSlowInEasing&#10;import androidx.compose.animation.core.animateDpAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.text.input.TextFieldState&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.FilterList&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.semantics.isTraversalGroup&#10;import androidx.compose.ui.semantics.semantics&#10;import androidx.compose.ui.semantics.traversalIndex&#10;import androidx.compose.ui.unit.dp&#10;import rs.gospaleks.waterspot.domain.model.CleanlinessLevelEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotTypeEnum&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.getColor&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SearchAndFilter(&#10;    textFieldState: TextFieldState,&#10;    searchResults: List&lt;String&gt;,&#10;    // Filters&#10;    selectedTypes: Set&lt;SpotTypeEnum&gt;,&#10;    onToggleType: (SpotTypeEnum) -&gt; Unit,&#10;    selectedCleanliness: Set&lt;CleanlinessLevelEnum&gt;,&#10;    onToggleCleanliness: (CleanlinessLevelEnum) -&gt; Unit,&#10;    radiusKm: Int,&#10;    onRadiusChange: (Int) -&gt; Unit,&#10;    onRadiusChangeFinished: () -&gt; Unit,&#10;    onQueryChange: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var expanded by rememberSaveable { mutableStateOf(false) }&#10;    var filtersVisible by rememberSaveable { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier&#10;            .background(MaterialTheme.colorScheme.surface)&#10;            .semantics { isTraversalGroup = true }&#10;    ) {&#10;        val targetPadding = if (expanded) 0.dp else 24.dp&#10;        val animatedPadding by animateDpAsState(&#10;            targetValue = targetPadding,&#10;            animationSpec = tween(durationMillis = 220, easing = FastOutSlowInEasing),&#10;            label = &quot;searchBarHorizontalPadding&quot;&#10;        )&#10;&#10;        Box(modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = animatedPadding)&#10;        ) {&#10;            SearchBar(&#10;                modifier = Modifier&#10;                    .semantics { traversalIndex = 0f }&#10;                    .fillMaxWidth(),&#10;                inputField = {&#10;                    SearchBarDefaults.InputField(&#10;                        query = textFieldState.text.toString(),&#10;                        onQueryChange = {&#10;                            textFieldState.edit { replace(0, length, it) }&#10;                            onQueryChange(it)&#10;                        },&#10;                        onSearch = {&#10;                            onQueryChange(textFieldState.text.toString())&#10;                            expanded = false&#10;                        },&#10;                        expanded = expanded,&#10;                        onExpandedChange = { expanded = it },&#10;                        placeholder = { Text(&quot;Search&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Search,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(18.dp)&#10;                            )&#10;                        }&#10;                    )&#10;                },&#10;                expanded = expanded,&#10;                onExpandedChange = { expanded = it },&#10;            ) {&#10;                // Fullscreen, scrollable suggestions area&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .imePadding(),&#10;                    contentPadding = PaddingValues(horizontal = 24.dp, vertical = 12.dp)&#10;                ) {&#10;                    items(searchResults.size) { idx -&gt;&#10;                        val result = searchResults[idx]&#10;                        ListItem(&#10;                            headlineContent = { Text(result) },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    textFieldState.edit { replace(0, length, result) }&#10;                                    onQueryChange(result)&#10;                                    expanded = false&#10;                                }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(2.dp))&#10;&#10;        // Filters toggle row&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 24.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                Icon(imageVector = Icons.Default.FilterList, contentDescription = null)&#10;                Spacer(Modifier.width(8.dp))&#10;                Text(text = &quot;Filters&quot;)&#10;            }&#10;            Switch(&#10;                checked = filtersVisible,&#10;                onCheckedChange = { filtersVisible = it }&#10;            )&#10;        }&#10;&#10;        AnimatedVisibility(&#10;            visible = filtersVisible,&#10;            enter = fadeIn() + expandVertically(),&#10;            exit = fadeOut() + shrinkVertically()&#10;        ) {&#10;            Column {&#10;                Spacer(Modifier.height(8.dp))&#10;&#10;                // Spot Types&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    contentPadding = PaddingValues(horizontal = 24.dp)&#10;                ) {&#10;                    val allTypes = SpotTypeEnum.entries&#10;                    items(allTypes.size) { idx -&gt;&#10;                        val type = allTypes[idx]&#10;                        FilterChip(&#10;                            selected = selectedTypes.contains(type),&#10;                            onClick = { onToggleType(type) },&#10;                            label = { Text(type.toDisplayName()) },&#10;                            leadingIcon = {&#10;                                Icon(&#10;                                    imageVector = type.icon(),&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(6.dp))&#10;&#10;                // Cleanliness Levels&#10;                val allLevels = CleanlinessLevelEnum.entries&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    contentPadding = PaddingValues(horizontal = 24.dp)&#10;                ) {&#10;                    items(allLevels.size) { idx -&gt;&#10;                        val level = allLevels[idx]&#10;                        FilterChip(&#10;                            selected = selectedCleanliness.contains(level),&#10;                            onClick = { onToggleCleanliness(level) },&#10;                            label = { Text(level.toDisplayName()) },&#10;                            leadingIcon = {&#10;                                Icon(&#10;                                    imageVector = level.icon(),&#10;                                    contentDescription = null,&#10;                                    tint = level.getColor(),&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(12.dp))&#10;&#10;                Text(&#10;                    text = &quot;Radius&quot;,&#10;                    style = MaterialTheme.typography.labelLarge,&#10;                    modifier = Modifier.padding(horizontal = 24.dp)&#10;                )&#10;                val radiusOptions = listOf(1, 2, 5, 10, 20, 30, 50)&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    contentPadding = PaddingValues(horizontal = 24.dp)&#10;                ) {&#10;                    items(radiusOptions.size) { idx -&gt;&#10;                        val km = radiusOptions[idx]&#10;                        FilterChip(&#10;                            selected = radiusKm == km,&#10;                            onClick = {&#10;                                if (radiusKm != km) {&#10;                                    onRadiusChange(km)&#10;                                    onRadiusChangeFinished()&#10;                                }&#10;                            },&#10;                            label = { Text(&quot;$km km&quot;) }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(8.dp))&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.all_spots&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.animateColorAsState&#10;import androidx.compose.animation.core.FastOutSlowInEasing&#10;import androidx.compose.animation.core.animateDpAsState&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.text.input.TextFieldState&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.FilterList&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.semantics.isTraversalGroup&#10;import androidx.compose.ui.semantics.semantics&#10;import androidx.compose.ui.semantics.traversalIndex&#10;import androidx.compose.ui.unit.dp&#10;import rs.gospaleks.waterspot.domain.model.CleanlinessLevelEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotTypeEnum&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.getColor&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SearchAndFilter(&#10;    textFieldState: TextFieldState,&#10;    searchResults: List&lt;String&gt;,&#10;    // Filters&#10;    selectedTypes: Set&lt;SpotTypeEnum&gt;,&#10;    onToggleType: (SpotTypeEnum) -&gt; Unit,&#10;    selectedCleanliness: Set&lt;CleanlinessLevelEnum&gt;,&#10;    onToggleCleanliness: (CleanlinessLevelEnum) -&gt; Unit,&#10;    radiusKm: Int,&#10;    onRadiusChange: (Int) -&gt; Unit,&#10;    onRadiusChangeFinished: () -&gt; Unit,&#10;    onQueryChange: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var expanded by rememberSaveable { mutableStateOf(false) }&#10;    var filtersVisible by rememberSaveable { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier&#10;            .background(MaterialTheme.colorScheme.surface)&#10;            .semantics { isTraversalGroup = true }&#10;    ) {&#10;        val targetPadding = if (expanded) 0.dp else 24.dp&#10;        val animatedPadding by animateDpAsState(&#10;            targetValue = targetPadding,&#10;            animationSpec = tween(durationMillis = 220, easing = FastOutSlowInEasing),&#10;            label = &quot;searchBarHorizontalPadding&quot;&#10;        )&#10;&#10;        Box(modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = animatedPadding)&#10;        ) {&#10;            SearchBar(&#10;                modifier = Modifier&#10;                    .semantics { traversalIndex = 0f }&#10;                    .fillMaxWidth(),&#10;                inputField = {&#10;                    SearchBarDefaults.InputField(&#10;                        query = textFieldState.text.toString(),&#10;                        onQueryChange = {&#10;                            textFieldState.edit { replace(0, length, it) }&#10;                            onQueryChange(it)&#10;                        },&#10;                        onSearch = {&#10;                            onQueryChange(textFieldState.text.toString())&#10;                            expanded = false&#10;                        },&#10;                        expanded = expanded,&#10;                        onExpandedChange = { expanded = it },&#10;                        placeholder = { Text(&quot;Search&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Search,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(18.dp)&#10;                            )&#10;                        }&#10;                    )&#10;                },&#10;                expanded = expanded,&#10;                onExpandedChange = { expanded = it },&#10;            ) {&#10;                // Fullscreen, scrollable suggestions area&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .imePadding(),&#10;                    contentPadding = PaddingValues(horizontal = 24.dp, vertical = 12.dp)&#10;                ) {&#10;                    items(searchResults.size) { idx -&gt;&#10;                        val result = searchResults[idx]&#10;                        ListItem(&#10;                            headlineContent = { Text(result) },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    textFieldState.edit { replace(0, length, result) }&#10;                                    onQueryChange(result)&#10;                                    expanded = false&#10;                                }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(2.dp))&#10;&#10;        // Filters toggle row (icon only)&#10;        val rotation by animateFloatAsState(&#10;            targetValue = if (filtersVisible) 180f else 0f,&#10;            animationSpec = tween(220, FastOutSlowInEasing),&#10;            label = &quot;filtersIconRotation&quot;&#10;        )&#10;        val iconTint by animateColorAsState(&#10;            targetValue = if (filtersVisible) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant,&#10;            animationSpec = tween(220, FastOutSlowInEasing),&#10;            label = &quot;filtersIconTint&quot;&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 24.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                Icon(&#10;                    imageVector = Icons.Default.FilterList,&#10;                    contentDescription = &quot;Toggle filters&quot;,&#10;                    tint = iconTint,&#10;                    modifier = Modifier&#10;                        .size(24.dp)&#10;                        .rotate(rotation)&#10;                        .clickable { filtersVisible = !filtersVisible }&#10;                )&#10;                Spacer(Modifier.width(8.dp))&#10;                Text(text = &quot;Filters&quot;)&#10;            }&#10;        }&#10;&#10;        AnimatedVisibility(&#10;            visible = filtersVisible,&#10;            enter = fadeIn() + expandVertically(),&#10;            exit = fadeOut() + shrinkVertically()&#10;        ) {&#10;            Column {&#10;                Spacer(Modifier.height(8.dp))&#10;&#10;                // Spot Types&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    contentPadding = PaddingValues(horizontal = 24.dp)&#10;                ) {&#10;                    val allTypes = SpotTypeEnum.entries&#10;                    items(allTypes.size) { idx -&gt;&#10;                        val type = allTypes[idx]&#10;                        FilterChip(&#10;                            selected = selectedTypes.contains(type),&#10;                            onClick = { onToggleType(type) },&#10;                            label = { Text(type.toDisplayName()) },&#10;                            leadingIcon = {&#10;                                Icon(&#10;                                    imageVector = type.icon(),&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(6.dp))&#10;&#10;                // Cleanliness Levels&#10;                val allLevels = CleanlinessLevelEnum.entries&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    contentPadding = PaddingValues(horizontal = 24.dp)&#10;                ) {&#10;                    items(allLevels.size) { idx -&gt;&#10;                        val level = allLevels[idx]&#10;                        FilterChip(&#10;                            selected = selectedCleanliness.contains(level),&#10;                            onClick = { onToggleCleanliness(level) },&#10;                            label = { Text(level.toDisplayName()) },&#10;                            leadingIcon = {&#10;                                Icon(&#10;                                    imageVector = level.icon(),&#10;                                    contentDescription = null,&#10;                                    tint = level.getColor(),&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(12.dp))&#10;&#10;                Text(&#10;                    text = &quot;Radius&quot;,&#10;                    style = MaterialTheme.typography.labelLarge,&#10;                    modifier = Modifier.padding(horizontal = 24.dp)&#10;                )&#10;                val radiusOptions = listOf(1, 2, 5, 10, 20, 30, 50)&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    contentPadding = PaddingValues(horizontal = 24.dp)&#10;                ) {&#10;                    items(radiusOptions.size) { idx -&gt;&#10;                        val km = radiusOptions[idx]&#10;                        FilterChip(&#10;                            selected = radiusKm == km,&#10;                            onClick = {&#10;                                if (radiusKm != km) {&#10;                                    onRadiusChange(km)&#10;                                    onRadiusChangeFinished()&#10;                                }&#10;                            },&#10;                            label = { Text(&quot;$km km&quot;) }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(8.dp))&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.domain.model.User&#10;import rs.gospaleks.waterspot.presentation.components.CleanlinessChip&#10;import rs.gospaleks.waterspot.R&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    selectedSpotId: String? = null,&#10;    onDismiss: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onLoadSpotDetails: (String) -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    LaunchedEffect(selectedSpotId) {&#10;        selectedSpotId?.let { spotId -&gt;&#10;            // Mala pauza da se animacija otvaranja završi&#10;            delay(200)&#10;            onLoadSpotDetails(spotId)&#10;        }&#10;    }&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading || spotDetails == null) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight(0.5f)&#10;                        .fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center,&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                SpotDetailsContent(&#10;                    spotDetails = spotDetails,&#10;                    onNavigateClick = onNavigateClick,&#10;                    onReviewClick = onReviewClick,&#10;                    onUserProfileClick = onUserProfileClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotDetailsContent(&#10;    spotDetails: SpotDetails,&#10;    onReviewClick: () -&gt; Unit = {},&#10;    onNavigateClick: () -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Photo&#10;        spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;            AsyncImage(&#10;                model = photoUrl,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .aspectRatio(4f / 3f)&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Header with type and date&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Type with icon&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = spotDetails.spot.type.icon(),&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;&#10;            // Cleanliness chip&#10;            CleanlinessChip(&#10;                cleanliness = spotDetails.spot.cleanliness,&#10;                modifier = Modifier.wrapContentWidth()&#10;            )&#10;        }&#10;&#10;        // Description&#10;        spotDetails.spot.description?.let { description -&gt;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = description,&#10;                modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;&#10;        // Clickable user info&#10;        spotDetails.user?.let { user -&gt;&#10;            PostedByCard(user, onUserProfileClick)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Action buttons&#10;        ActionsButtons(&#10;            onNavigateClick = onNavigateClick,&#10;            onReviewClick = onReviewClick&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PostedByCard(&#10;    user: User,&#10;    onUserProfileClick: () -&gt; Unit,&#10;) {&#10;    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;    Card(&#10;        onClick = onUserProfileClick,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            AsyncImage(&#10;                model = user.profilePictureUrl,&#10;                contentDescription = &quot;Profile picture&quot;,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = stringResource(R.string.spot_details_posted_by),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = user.fullName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionsButtons(&#10;    onNavigateClick: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;) {&#10;    Row(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Button(&#10;            onClick = onNavigateClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Navigation,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_navigate_button))&#10;        }&#10;&#10;        OutlinedButton(&#10;            onClick = onReviewClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Outlined.Report,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_review_button))&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.domain.model.User&#10;import rs.gospaleks.waterspot.presentation.components.CleanlinessChip&#10;import rs.gospaleks.waterspot.R&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    selectedSpotId: String? = null,&#10;    onDismiss: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onLoadSpotDetails: (String) -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    LaunchedEffect(selectedSpotId) {&#10;        selectedSpotId?.let { spotId -&gt;&#10;            // Mala pauza da se animacija otvaranja završi&#10;            delay(200)&#10;            onLoadSpotDetails(spotId)&#10;        }&#10;    }&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading || spotDetails == null) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight(0.5f)&#10;                        .fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center,&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                SpotDetailsContent(&#10;                    spotDetails = spotDetails,&#10;                    onNavigateClick = onNavigateClick,&#10;                    onReviewClick = onReviewClick,&#10;                    onUserProfileClick = onUserProfileClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotDetailsContent(&#10;    spotDetails: SpotDetails,&#10;    onReviewClick: () -&gt; Unit = {},&#10;    onNavigateClick: () -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Photo&#10;        spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;            AsyncImage(&#10;                model = photoUrl,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .aspectRatio(4f / 3f)&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Header with type and date&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Type with icon&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = spotDetails.spot.type.icon(),&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;&#10;            // Cleanliness chip&#10;            CleanlinessChip(&#10;                cleanliness = spotDetails.spot.cleanliness,&#10;                modifier = Modifier.wrapContentWidth()&#10;            )&#10;        }&#10;&#10;        // Description&#10;        spotDetails.spot.description?.let { description -&gt;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = description,&#10;                modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;&#10;        // Clickable user info&#10;        spotDetails.user?.let { user -&gt;&#10;            PostedByCard(user, onUserProfileClick)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Action buttons&#10;        ActionsButtons(&#10;            onNavigateClick = onNavigateClick,&#10;            onReviewClick = onReviewClick&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PostedByCard(&#10;    user: User,&#10;    onUserProfileClick: () -&gt; Unit,&#10;) {&#10;    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;    Card(&#10;        onClick = onUserProfileClick,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            AsyncImage(&#10;                model = user.profilePictureUrl,&#10;                contentDescription = &quot;Profile picture&quot;,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = stringResource(R.string.spot_details_posted_by),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = user.fullName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionsButtons(&#10;    onNavigateClick: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;) {&#10;    Row(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Button(&#10;            onClick = onNavigateClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Navigation,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_navigate_button))&#10;        }&#10;&#10;        OutlinedButton(&#10;            onClick = onReviewClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Outlined.Report,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_review_button))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>