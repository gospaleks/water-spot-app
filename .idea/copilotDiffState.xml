<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/all_spots/AllSpotsViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/all_spots/AllSpotsViewModel.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.all_spots&#10;&#10;import androidx.compose.foundation.text.input.TextFieldState&#10;import androidx.compose.runtime.derivedStateOf&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.android.gms.maps.model.LatLng&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.launch&#10;import rs.gospaleks.waterspot.domain.model.CleanlinessLevelEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotTypeEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotWithUser&#10;import rs.gospaleks.waterspot.domain.use_case.spot.GetAllSpotsWithUserUseCase&#10;import rs.gospaleks.waterspot.domain.use_case.location.LocationTrackingUseCase&#10;import javax.inject.Inject&#10;&#10;// Date filter presets for updatedAt field&#10;enum class DateFilterPreset { ANY, OLDER_WEEK, OLDER_MONTH, OLDER_6_MONTHS, OLDER_YEAR, CUSTOM }&#10;&#10;// Sort options for the list&#10;enum class SortByOption { UPDATED_DESC, UPDATED_ASC, CREATED_DESC, CREATED_ASC }&#10;&#10;data class AllSpotsUiState(&#10;    val isLoading: Boolean = false,&#10;    val isRefreshing: Boolean = false,&#10;    // Full list fetched from the backend for the current radius&#10;    val allSpots: List&lt;SpotWithUser&gt; = emptyList(),&#10;    // Filters&#10;    val selectedTypeFilters: Set&lt;SpotTypeEnum&gt; = emptySet(),&#10;    val selectedCleanlinessFilters: Set&lt;CleanlinessLevelEnum&gt; = emptySet(),&#10;    val searchQuery: String = &quot;&quot;,&#10;    // Store radius in meters for finer control (supports sub-km)&#10;    val radiusMeters: Int = DEFAULT_RADIUS_METERS,&#10;    // Date filter&#10;    val dateFilterPreset: DateFilterPreset = DateFilterPreset.ANY,&#10;    val customStartDateMillis: Long? = null,&#10;    val customEndDateMillis: Long? = null,&#10;    // Sort&#10;    val sortBy: SortByOption = SortByOption.UPDATED_DESC,&#10;    val error: String? = null&#10;)&#10;&#10;const val DEFAULT_RADIUS_METERS = 20_000&#10;&#10;@HiltViewModel&#10;class AllSpotsViewModel @Inject constructor(&#10;    private val getAllSpotsWithUserUseCase: GetAllSpotsWithUserUseCase,&#10;    locationTrackingUseCase: LocationTrackingUseCase&#10;) : ViewModel() {&#10;    var uiState by mutableStateOf(AllSpotsUiState())&#10;        private set&#10;&#10;    val filteredSpots = derivedStateOf {&#10;        val query = uiState.searchQuery.trim().lowercase()&#10;        val types = uiState.selectedTypeFilters&#10;        val cleanliness = uiState.selectedCleanlinessFilters&#10;        val preset = uiState.dateFilterPreset&#10;        val customStart = uiState.customStartDateMillis&#10;        val customEnd = uiState.customEndDateMillis&#10;&#10;        val now = System.currentTimeMillis()&#10;        val olderThanMillis = when (preset) {&#10;            DateFilterPreset.OLDER_WEEK -&gt; 7L * 24 * 60 * 60 * 1000&#10;            DateFilterPreset.OLDER_MONTH -&gt; 30L * 24 * 60 * 60 * 1000&#10;            DateFilterPreset.OLDER_6_MONTHS -&gt; 182L * 24 * 60 * 60 * 1000&#10;            DateFilterPreset.OLDER_YEAR -&gt; 365L * 24 * 60 * 60 * 1000&#10;            else -&gt; null&#10;        }&#10;&#10;        val filtered = uiState.allSpots.filter { item -&gt;&#10;            val spot = item.spot&#10;            val typeOk = types.isEmpty() || types.contains(spot.type)&#10;            val cleanlinessOk = cleanliness.isEmpty() || cleanliness.contains(spot.cleanliness)&#10;&#10;            val searchOk = if (query.isEmpty()) true else {&#10;                val haystack = buildString {&#10;                    append(spot.description ?: &quot;&quot;)&#10;                    append(' ')&#10;                    append(spot.type.name)&#10;                    append(' ')&#10;                    append(spot.cleanliness.name)&#10;                    append(' ')&#10;                    append(item.user?.fullName ?: &quot;&quot;)&#10;                }.lowercase()&#10;                haystack.contains(query)&#10;            }&#10;&#10;            val updatedAt = spot.updatedAt&#10;            val dateOk = when (preset) {&#10;                DateFilterPreset.ANY -&gt; true&#10;                DateFilterPreset.CUSTOM -&gt; {&#10;                    if (updatedAt == null) false else {&#10;                        val lowerOk = customStart?.let { updatedAt &gt;= it } ?: true&#10;                        val upperOk = customEnd?.let { updatedAt &lt;= it } ?: true&#10;                        lowerOk &amp;&amp; upperOk&#10;                    }&#10;                }&#10;                else -&gt; {&#10;                    if (updatedAt == null) false else {&#10;                        val threshold = now - (olderThanMillis ?: 0L)&#10;                        updatedAt &lt;= threshold&#10;                    }&#10;                }&#10;            }&#10;&#10;            typeOk &amp;&amp; cleanlinessOk &amp;&amp; searchOk &amp;&amp; dateOk&#10;        }&#10;&#10;        when (uiState.sortBy) {&#10;            SortByOption.UPDATED_DESC -&gt; filtered.sortedByDescending { it.spot.updatedAt ?: Long.MIN_VALUE }&#10;            SortByOption.UPDATED_ASC -&gt; filtered.sortedBy { it.spot.updatedAt ?: Long.MAX_VALUE }&#10;            SortByOption.CREATED_DESC -&gt; filtered.sortedByDescending { it.spot.createdAt ?: Long.MIN_VALUE }&#10;            SortByOption.CREATED_ASC -&gt; filtered.sortedBy { it.spot.createdAt ?: Long.MAX_VALUE }&#10;        }&#10;    }&#10;&#10;&#10;    var textFieldState by mutableStateOf(TextFieldState())&#10;&#10;    private var currLocation: LatLng = LatLng(0.0, 0.0)&#10;    private var observeJob: Job? = null&#10;&#10;    init {&#10;        currLocation = locationTrackingUseCase.currentLocation.value ?: currLocation&#10;        // Initial fetch with default radius (meters)&#10;        observeSpots(radiusMeters = uiState.radiusMeters)&#10;    }&#10;&#10;    // Public API to update filters/search&#10;    fun toggleTypeFilter(type: SpotTypeEnum) {&#10;        val newSet = uiState.selectedTypeFilters.toMutableSet().apply {&#10;            if (contains(type)) remove(type) else add(type)&#10;        }.toSet()&#10;        uiState = uiState.copy(selectedTypeFilters = newSet)&#10;    }&#10;&#10;    fun toggleCleanlinessFilter(level: CleanlinessLevelEnum) {&#10;        val newSet = uiState.selectedCleanlinessFilters.toMutableSet().apply {&#10;            if (contains(level)) remove(level) else add(level)&#10;        }.toSet()&#10;        uiState = uiState.copy(selectedCleanlinessFilters = newSet)&#10;    }&#10;&#10;    fun setSearchQuery(query: String) {&#10;        uiState = uiState.copy(searchQuery = query)&#10;    }&#10;&#10;    // Date filter: preset selection&#10;    fun setDatePreset(preset: DateFilterPreset) {&#10;        uiState = uiState.copy(&#10;            dateFilterPreset = preset,&#10;            // Clear custom range when switching away from CUSTOM&#10;            customStartDateMillis = if (preset == DateFilterPreset.CUSTOM) uiState.customStartDateMillis else null,&#10;            customEndDateMillis = if (preset == DateFilterPreset.CUSTOM) uiState.customEndDateMillis else null,&#10;        )&#10;    }&#10;&#10;    // Date filter: set custom range (also sets preset to CUSTOM)&#10;    fun setCustomDateRange(startMillis: Long?, endMillis: Long?) {&#10;        uiState = uiState.copy(&#10;            dateFilterPreset = DateFilterPreset.CUSTOM,&#10;            customStartDateMillis = startMillis,&#10;            customEndDateMillis = endMillis&#10;        )&#10;    }&#10;&#10;    // Sort: set selected sort&#10;    fun setSortBy(option: SortByOption) {&#10;        if (uiState.sortBy != option) {&#10;            uiState = uiState.copy(sortBy = option)&#10;        }&#10;    }&#10;&#10;    // Slider moves (no fetch yet)&#10;    fun updateRadiusMeters(meters: Int) {&#10;        if (meters != uiState.radiusMeters) {&#10;            uiState = uiState.copy(radiusMeters = meters)&#10;        }&#10;    }&#10;&#10;    // Called when slider finishes or quick-chip selected&#10;    fun applyRadiusChange() {&#10;        observeSpots(radiusMeters = uiState.radiusMeters, forceLoading = true)&#10;    }&#10;&#10;    fun clearAllFilters() {&#10;        val reset = uiState.copy(&#10;            selectedTypeFilters = emptySet(),&#10;            selectedCleanlinessFilters = emptySet(),&#10;            radiusMeters = DEFAULT_RADIUS_METERS,&#10;            dateFilterPreset = DateFilterPreset.ANY,&#10;            customStartDateMillis = null,&#10;            customEndDateMillis = null,&#10;            sortBy = SortByOption.UPDATED_DESC&#10;        )&#10;        uiState = reset&#10;        // Refresh for default radius&#10;        observeSpots(radiusMeters = uiState.radiusMeters, forceLoading = true)&#10;    }&#10;&#10;    fun observeSpots(radiusMeters: Int, forceLoading: Boolean = false) {&#10;        observeJob?.cancel()&#10;        observeJob = viewModelScope.launch {&#10;            // Show loading only on first load (empty) or if explicitly forced (e.g., radius change)&#10;            val shouldShowLoading = forceLoading || uiState.allSpots.isEmpty()&#10;            uiState = uiState.copy(isLoading = shouldShowLoading)&#10;&#10;            getAllSpotsWithUserUseCase(&#10;                currLocation.latitude,&#10;                currLocation.longitude,&#10;                radiusMeters.toDouble()&#10;            ).collect { result -&gt;&#10;                result&#10;                    .onSuccess { spots -&gt;&#10;                        uiState = uiState.copy(&#10;                            allSpots = spots,&#10;                            isLoading = false,&#10;                            isRefreshing = false,&#10;                            error = null,&#10;                        )&#10;                    }&#10;                    .onFailure { error -&gt;&#10;                        uiState = uiState.copy(&#10;                            isLoading = false,&#10;                            isRefreshing = false,&#10;                            allSpots = emptyList(),&#10;                            error = error.message ?: &quot;Unknown error&quot;&#10;                        )&#10;                    }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun refresh() {&#10;        // Re-fetch spots with current radius and apply filters that were set&#10;        uiState = uiState.copy(isRefreshing = true)&#10;        observeSpots(radiusMeters = uiState.radiusMeters, forceLoading = true)&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.all_spots&#10;&#10;import androidx.compose.foundation.text.input.TextFieldState&#10;import androidx.compose.runtime.derivedStateOf&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.android.gms.maps.model.LatLng&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;import rs.gospaleks.waterspot.domain.model.CleanlinessLevelEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotTypeEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotWithUser&#10;import rs.gospaleks.waterspot.domain.use_case.spot.GetAllSpotsWithUserUseCase&#10;import rs.gospaleks.waterspot.domain.use_case.location.LocationTrackingUseCase&#10;import javax.inject.Inject&#10;&#10;// Date filter presets for updatedAt field&#10;enum class DateFilterPreset { ANY, OLDER_WEEK, OLDER_MONTH, OLDER_6_MONTHS, OLDER_YEAR, CUSTOM }&#10;&#10;// Sort options for the list&#10;enum class SortByOption { UPDATED_DESC, UPDATED_ASC, CREATED_DESC, CREATED_ASC }&#10;&#10;data class AllSpotsUiState(&#10;    val isLoading: Boolean = false,&#10;    val isRefreshing: Boolean = false,&#10;    // Full list fetched from the backend for the current radius&#10;    val allSpots: List&lt;SpotWithUser&gt; = emptyList(),&#10;    // Filters&#10;    val selectedTypeFilters: Set&lt;SpotTypeEnum&gt; = emptySet(),&#10;    val selectedCleanlinessFilters: Set&lt;CleanlinessLevelEnum&gt; = emptySet(),&#10;    val searchQuery: String = &quot;&quot;,&#10;    // Store radius in meters for finer control (supports sub-km)&#10;    val radiusMeters: Int = DEFAULT_RADIUS_METERS,&#10;    // Date filter&#10;    val dateFilterPreset: DateFilterPreset = DateFilterPreset.ANY,&#10;    val customStartDateMillis: Long? = null,&#10;    val customEndDateMillis: Long? = null,&#10;    // Sort&#10;    val sortBy: SortByOption = SortByOption.UPDATED_DESC,&#10;    val error: String? = null&#10;)&#10;&#10;const val DEFAULT_RADIUS_METERS = 20_000&#10;&#10;@HiltViewModel&#10;class AllSpotsViewModel @Inject constructor(&#10;    private val getAllSpotsWithUserUseCase: GetAllSpotsWithUserUseCase,&#10;    locationTrackingUseCase: LocationTrackingUseCase&#10;) : ViewModel() {&#10;    var uiState by mutableStateOf(AllSpotsUiState())&#10;        private set&#10;&#10;    val filteredSpots = derivedStateOf {&#10;        val query = uiState.searchQuery.trim().lowercase()&#10;        val types = uiState.selectedTypeFilters&#10;        val cleanliness = uiState.selectedCleanlinessFilters&#10;        val preset = uiState.dateFilterPreset&#10;        val customStart = uiState.customStartDateMillis&#10;        val customEnd = uiState.customEndDateMillis&#10;&#10;        val now = System.currentTimeMillis()&#10;        val olderThanMillis = when (preset) {&#10;            DateFilterPreset.OLDER_WEEK -&gt; 7L * 24 * 60 * 60 * 1000&#10;            DateFilterPreset.OLDER_MONTH -&gt; 30L * 24 * 60 * 60 * 1000&#10;            DateFilterPreset.OLDER_6_MONTHS -&gt; 182L * 24 * 60 * 60 * 1000&#10;            DateFilterPreset.OLDER_YEAR -&gt; 365L * 24 * 60 * 60 * 1000&#10;            else -&gt; null&#10;        }&#10;&#10;        val filtered = uiState.allSpots.filter { item -&gt;&#10;            val spot = item.spot&#10;            val typeOk = types.isEmpty() || types.contains(spot.type)&#10;            val cleanlinessOk = cleanliness.isEmpty() || cleanliness.contains(spot.cleanliness)&#10;&#10;            val searchOk = if (query.isEmpty()) true else {&#10;                val haystack = buildString {&#10;                    append(spot.description ?: &quot;&quot;)&#10;                    append(' ')&#10;                    append(spot.type.name)&#10;                    append(' ')&#10;                    append(spot.cleanliness.name)&#10;                    append(' ')&#10;                    append(item.user?.fullName ?: &quot;&quot;)&#10;                }.lowercase()&#10;                haystack.contains(query)&#10;            }&#10;&#10;            val updatedAt = spot.updatedAt&#10;            val dateOk = when (preset) {&#10;                DateFilterPreset.ANY -&gt; true&#10;                DateFilterPreset.CUSTOM -&gt; {&#10;                    if (updatedAt == null) false else {&#10;                        val lowerOk = customStart?.let { updatedAt &gt;= it } ?: true&#10;                        val upperOk = customEnd?.let { updatedAt &lt;= it } ?: true&#10;                        lowerOk &amp;&amp; upperOk&#10;                    }&#10;                }&#10;                else -&gt; {&#10;                    if (updatedAt == null) false else {&#10;                        val threshold = now - (olderThanMillis ?: 0L)&#10;                        updatedAt &lt;= threshold&#10;                    }&#10;                }&#10;            }&#10;&#10;            typeOk &amp;&amp; cleanlinessOk &amp;&amp; searchOk &amp;&amp; dateOk&#10;        }&#10;&#10;        when (uiState.sortBy) {&#10;            SortByOption.UPDATED_DESC -&gt; filtered.sortedByDescending { it.spot.updatedAt ?: Long.MIN_VALUE }&#10;            SortByOption.UPDATED_ASC -&gt; filtered.sortedBy { it.spot.updatedAt ?: Long.MAX_VALUE }&#10;            SortByOption.CREATED_DESC -&gt; filtered.sortedByDescending { it.spot.createdAt ?: Long.MIN_VALUE }&#10;            SortByOption.CREATED_ASC -&gt; filtered.sortedBy { it.spot.createdAt ?: Long.MAX_VALUE }&#10;        }&#10;    }&#10;&#10;&#10;    var textFieldState by mutableStateOf(TextFieldState())&#10;&#10;    private var currLocation: LatLng = LatLng(0.0, 0.0)&#10;    private var observeJob: Job? = null&#10;    private var searchDebounceJob: Job? = null&#10;&#10;    init {&#10;        currLocation = locationTrackingUseCase.currentLocation.value ?: currLocation&#10;        // Initial fetch with default radius (meters)&#10;        observeSpots(radiusMeters = uiState.radiusMeters)&#10;    }&#10;&#10;    // Public API to update filters/search&#10;    fun toggleTypeFilter(type: SpotTypeEnum) {&#10;        val newSet = uiState.selectedTypeFilters.toMutableSet().apply {&#10;            if (contains(type)) remove(type) else add(type)&#10;        }.toSet()&#10;        uiState = uiState.copy(selectedTypeFilters = newSet)&#10;    }&#10;&#10;    fun toggleCleanlinessFilter(level: CleanlinessLevelEnum) {&#10;        val newSet = uiState.selectedCleanlinessFilters.toMutableSet().apply {&#10;            if (contains(level)) remove(level) else add(level)&#10;        }.toSet()&#10;        uiState = uiState.copy(selectedCleanlinessFilters = newSet)&#10;    }&#10;&#10;    fun setSearchQuery(query: String) {&#10;        // Debounce updates to state so filtering doesn't run on every keystroke&#10;        searchDebounceJob?.cancel()&#10;        if (query.isEmpty()) {&#10;            uiState = uiState.copy(searchQuery = &quot;&quot;)&#10;            return&#10;        }&#10;        searchDebounceJob = viewModelScope.launch {&#10;            delay(300)&#10;            uiState = uiState.copy(searchQuery = query)&#10;        }&#10;    }&#10;&#10;    // Date filter: preset selection&#10;    fun setDatePreset(preset: DateFilterPreset) {&#10;        uiState = uiState.copy(&#10;            dateFilterPreset = preset,&#10;            // Clear custom range when switching away from CUSTOM&#10;            customStartDateMillis = if (preset == DateFilterPreset.CUSTOM) uiState.customStartDateMillis else null,&#10;            customEndDateMillis = if (preset == DateFilterPreset.CUSTOM) uiState.customEndDateMillis else null,&#10;        )&#10;    }&#10;&#10;    // Date filter: set custom range (also sets preset to CUSTOM)&#10;    fun setCustomDateRange(startMillis: Long?, endMillis: Long?) {&#10;        uiState = uiState.copy(&#10;            dateFilterPreset = DateFilterPreset.CUSTOM,&#10;            customStartDateMillis = startMillis,&#10;            customEndDateMillis = endMillis&#10;        )&#10;    }&#10;&#10;    // Sort: set selected sort&#10;    fun setSortBy(option: SortByOption) {&#10;        if (uiState.sortBy != option) {&#10;            uiState = uiState.copy(sortBy = option)&#10;        }&#10;    }&#10;&#10;    // Slider moves (no fetch yet)&#10;    fun updateRadiusMeters(meters: Int) {&#10;        if (meters != uiState.radiusMeters) {&#10;            uiState = uiState.copy(radiusMeters = meters)&#10;        }&#10;    }&#10;&#10;    // Called when slider finishes or quick-chip selected&#10;    fun applyRadiusChange() {&#10;        observeSpots(radiusMeters = uiState.radiusMeters, forceLoading = true)&#10;    }&#10;&#10;    fun clearAllFilters() {&#10;        val reset = uiState.copy(&#10;            selectedTypeFilters = emptySet(),&#10;            selectedCleanlinessFilters = emptySet(),&#10;            radiusMeters = DEFAULT_RADIUS_METERS,&#10;            dateFilterPreset = DateFilterPreset.ANY,&#10;            customStartDateMillis = null,&#10;            customEndDateMillis = null,&#10;            sortBy = SortByOption.UPDATED_DESC&#10;        )&#10;        uiState = reset&#10;        // Refresh for default radius&#10;        observeSpots(radiusMeters = uiState.radiusMeters, forceLoading = true)&#10;    }&#10;&#10;    fun observeSpots(radiusMeters: Int, forceLoading: Boolean = false) {&#10;        observeJob?.cancel()&#10;        observeJob = viewModelScope.launch {&#10;            // Show loading only on first load (empty) or if explicitly forced (e.g., radius change)&#10;            val shouldShowLoading = forceLoading || uiState.allSpots.isEmpty()&#10;            uiState = uiState.copy(isLoading = shouldShowLoading)&#10;&#10;            getAllSpotsWithUserUseCase(&#10;                currLocation.latitude,&#10;                currLocation.longitude,&#10;                radiusMeters.toDouble()&#10;            ).collect { result -&gt;&#10;                result&#10;                    .onSuccess { spots -&gt;&#10;                        uiState = uiState.copy(&#10;                            allSpots = spots,&#10;                            isLoading = false,&#10;                            isRefreshing = false,&#10;                            error = null,&#10;                        )&#10;                    }&#10;                    .onFailure { error -&gt;&#10;                        uiState = uiState.copy(&#10;                            isLoading = false,&#10;                            isRefreshing = false,&#10;                            allSpots = emptyList(),&#10;                            error = error.message ?: &quot;Unknown error&quot;&#10;                        )&#10;                    }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun refresh() {&#10;        // Re-fetch spots with current radius and apply filters that were set&#10;        uiState = uiState.copy(isRefreshing = true)&#10;        observeSpots(radiusMeters = uiState.radiusMeters, forceLoading = true)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/all_spots/SearchAndFilter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/all_spots/SearchAndFilter.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.all_spots&#10;&#10;import androidx.compose.animation.Crossfade&#10;import androidx.compose.animation.core.FastOutSlowInEasing&#10;import androidx.compose.animation.core.animateDpAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.text.input.TextFieldState&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.outlined.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.semantics.isTraversalGroup&#10;import androidx.compose.ui.semantics.semantics&#10;import androidx.compose.ui.semantics.traversalIndex&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.CleanlinessLevelEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotTypeEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotWithUser&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.getColor&#10;import rs.gospaleks.waterspot.presentation.components.ReusableBottomSheetHost&#10;import rs.gospaleks.waterspot.presentation.screens.all_spots.components.CleanlinessFilterBottomSheetContent&#10;import rs.gospaleks.waterspot.presentation.screens.all_spots.components.RadiusFilterBottomSheetContent&#10;import rs.gospaleks.waterspot.presentation.screens.all_spots.components.TypeFilterBottomSheetContent&#10;import rs.gospaleks.waterspot.presentation.screens.all_spots.components.DateFilterBottomSheetContent&#10;import rs.gospaleks.waterspot.presentation.screens.all_spots.components.SortByBottomSheetContent&#10;&#10;private enum class FilterSheet { Type, Cleanliness, Radius, Date, SortBy }&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SearchAndFilter(&#10;    textFieldState: TextFieldState,&#10;    searchResults: List&lt;SpotWithUser&gt;,&#10;    selectedTypes: Set&lt;SpotTypeEnum&gt;,&#10;    onToggleType: (SpotTypeEnum) -&gt; Unit,&#10;    selectedCleanliness: Set&lt;CleanlinessLevelEnum&gt;,&#10;    onToggleCleanliness: (CleanlinessLevelEnum) -&gt; Unit,&#10;    radiusMeters: Int,&#10;    onRadiusMetersChange: (Int) -&gt; Unit,&#10;    onRadiusChangeFinished: () -&gt; Unit,&#10;    onQueryChange: (String) -&gt; Unit,&#10;    onClearAllFilters: () -&gt; Unit,&#10;    // Date filter&#10;    dateFilterPreset: DateFilterPreset,&#10;    customStartDateMillis: Long?,&#10;    customEndDateMillis: Long?,&#10;    onSetDatePreset: (DateFilterPreset) -&gt; Unit,&#10;    onSetCustomDateRange: (Long?, Long?) -&gt; Unit,&#10;    // Sort by&#10;    sortBy: SortByOption,&#10;    onSetSortBy: (SortByOption) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var expanded by rememberSaveable { mutableStateOf(false) }&#10;&#10;    // Bottom sheet host state&#10;    var showBottomSheet by rememberSaveable { mutableStateOf(false) }&#10;    var currentSheet by rememberSaveable { mutableStateOf&lt;FilterSheet?&gt;(null) }&#10;&#10;    var showSuggestions by remember { mutableStateOf(false) }&#10;&#10;    LaunchedEffect(expanded) {&#10;        if (expanded) {&#10;            delay(200) // sačekaj da animacija završi da se rastereti lag&#10;            showSuggestions = true&#10;        } else {&#10;            showSuggestions = false&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier&#10;            .background(MaterialTheme.colorScheme.surface)&#10;            .semantics { isTraversalGroup = true }&#10;    ) {&#10;        val targetPadding = if (expanded) 0.dp else 24.dp&#10;        val animatedPadding by animateDpAsState(&#10;            targetValue = targetPadding,&#10;            animationSpec = tween(durationMillis = 220, easing = FastOutSlowInEasing),&#10;            label = &quot;searchBarHorizontalPadding&quot;&#10;        )&#10;&#10;        Box(modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = animatedPadding)&#10;        ) {&#10;            val queryString = textFieldState.text.toString()&#10;&#10;            SearchBar(&#10;                modifier = Modifier&#10;                    .semantics { traversalIndex = 0f }&#10;                    .fillMaxWidth(),&#10;                inputField = {&#10;                    SearchBarDefaults.InputField(&#10;                        query = queryString,&#10;                        onQueryChange = {&#10;                            textFieldState.edit { replace(0, length, it) }&#10;                            onQueryChange(it)&#10;                        },&#10;                        onSearch = {&#10;                            onQueryChange(queryString)&#10;                            expanded = false&#10;                        },&#10;                        expanded = expanded,&#10;                        onExpandedChange = { expanded = it },&#10;                        placeholder = { Text(&quot;Search&quot;) },&#10;                        leadingIcon = {&#10;                            Crossfade(targetState = expanded, label = &quot;leadingIconCrossfade&quot;) { isExpanded -&gt;&#10;                                if (isExpanded) {&#10;                                    Icon(&#10;                                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                        contentDescription = &quot;Back&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(18.dp)&#10;                                            .clickable { expanded = false }&#10;                                    )&#10;                                } else {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Search,&#10;                                        contentDescription = null,&#10;                                        modifier = Modifier.size(18.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                        },&#10;                        trailingIcon = {&#10;                            Crossfade(targetState = queryString.isNotEmpty(), label = &quot;trailingIconCrossfade&quot;) { show -&gt;&#10;                                if (show) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Close,&#10;                                        contentDescription = &quot;Clear&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(18.dp)&#10;                                            .clickable {&#10;                                                textFieldState.edit { replace(0, length, &quot;&quot;) }&#10;                                                onQueryChange(&quot;&quot;)&#10;                                            }&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                },&#10;                expanded = expanded,&#10;                onExpandedChange = { expanded = it },&#10;            ) {&#10;                // Fullscreen, scrollable suggestions area&#10;                if (showSuggestions &amp;&amp; queryString.isNotBlank()) {&#10;                    LazyColumn(&#10;                        modifier = Modifier&#10;                            .fillMaxSize(),&#10;                        contentPadding = PaddingValues(horizontal = 24.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        if (searchResults.isEmpty()) {&#10;                            item { NoResultsRow() }&#10;                        } else {&#10;                            val maxItems = 30&#10;                            val count =&#10;                                if (searchResults.size &gt; maxItems) maxItems else searchResults.size&#10;                            items(&#10;                                count = count,&#10;                                key = { idx -&gt; searchResults[idx].spot.id }) { idx -&gt;&#10;                                val item = searchResults[idx]&#10;                                val spot = item.spot&#10;                                val isFirst = idx == 0&#10;                                val isLast = idx == count - 1&#10;                                SearchSuggestionItem(&#10;                                    isFirst = isFirst,&#10;                                    isLast = isLast,&#10;                                    title = spot.description?.ifBlank { spot.type.toDisplayName() }&#10;                                        ?: spot.type.toDisplayName(),&#10;                                    type = spot.type,&#10;                                    cleanliness = spot.cleanliness,&#10;                                    author = item.user?.fullName,&#10;                                    onClick = {&#10;                                        val queryToApply =&#10;                                            spot.description?.takeIf { it.isNotBlank() }&#10;                                                ?: spot.type.name&#10;                                        textFieldState.edit { replace(0, length, queryToApply) }&#10;                                        onQueryChange(queryToApply)&#10;                                        expanded = false&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(8.dp))&#10;&#10;        // Gmail-like filters row -&gt; LazyRow with chips + clear icon&#10;        val hasActiveFilters = selectedTypes.isNotEmpty() || selectedCleanliness.isNotEmpty() || radiusMeters != DEFAULT_RADIUS_METERS || dateFilterPreset != DateFilterPreset.ANY || (customStartDateMillis != null || customEndDateMillis != null)&#10;        LazyRow(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            contentPadding = PaddingValues(horizontal = 24.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            item {&#10;                FilterChip(&#10;                    selected = selectedTypes.isNotEmpty(),&#10;                    onClick = {&#10;                        currentSheet = FilterSheet.Type&#10;                        showBottomSheet = true&#10;                    },&#10;                    label = {&#10;                        val count = selectedTypes.size&#10;                        Text(if (count == 0) &quot;Type&quot; else &quot;Type ($count)&quot;)&#10;                    }&#10;                )&#10;            }&#10;            item {&#10;                FilterChip(&#10;                    selected = selectedCleanliness.isNotEmpty(),&#10;                    onClick = {&#10;                        currentSheet = FilterSheet.Cleanliness&#10;                        showBottomSheet = true&#10;                    },&#10;                    label = {&#10;                        val count = selectedCleanliness.size&#10;                        Text(if (count == 0) &quot;Cleanliness&quot; else &quot;Cleanliness ($count)&quot;)&#10;                    }&#10;                )&#10;            }&#10;            item {&#10;                FilterChip(&#10;                    selected = radiusMeters != DEFAULT_RADIUS_METERS,&#10;                    onClick = {&#10;                        currentSheet = FilterSheet.Radius&#10;                        showBottomSheet = true&#10;                    },&#10;                    label = {&#10;                        Text(&quot;Radius: ${formatRadius(radiusMeters)}&quot;)&#10;                    }&#10;                )&#10;            }&#10;            item {&#10;                val dateLabel = when (dateFilterPreset) {&#10;                    DateFilterPreset.ANY -&gt; &quot;Date&quot;&#10;                    DateFilterPreset.OLDER_WEEK -&gt; &quot;Older than a week&quot;&#10;                    DateFilterPreset.OLDER_MONTH -&gt; &quot;Older than a month&quot;&#10;                    DateFilterPreset.OLDER_6_MONTHS -&gt; &quot;Older than 6 mont...&quot;&#10;                    DateFilterPreset.OLDER_YEAR -&gt; &quot;Older than a year&quot;&#10;                    DateFilterPreset.CUSTOM -&gt; &quot;Date: Custom&quot;&#10;                }&#10;&#10;                val dateSelected = dateFilterPreset != DateFilterPreset.ANY || (customStartDateMillis != null || customEndDateMillis != null)&#10;&#10;                FilterChip(&#10;                    selected = dateSelected,&#10;                    onClick = {&#10;                        currentSheet = FilterSheet.Date&#10;                        showBottomSheet = true&#10;                    },&#10;                    label = { Text(text = dateLabel) }&#10;                )&#10;            }&#10;            item {&#10;                val sortLabel = when (sortBy) {&#10;                    SortByOption.UPDATED_DESC -&gt; &quot;Updated: Newest&quot;&#10;                    SortByOption.UPDATED_ASC -&gt; &quot;Updated: Oldest&quot;&#10;                    SortByOption.CREATED_DESC -&gt; &quot;Created: Newest&quot;&#10;                    SortByOption.CREATED_ASC -&gt; &quot;Created: Oldest&quot;&#10;                }&#10;&#10;                FilterChip(&#10;                    selected = true,&#10;                    onClick = {&#10;                        currentSheet = FilterSheet.SortBy&#10;                        showBottomSheet = true&#10;                    },&#10;                    label = { Text(text = sortLabel) },&#10;                )&#10;            }&#10;            item {&#10;                if (hasActiveFilters) {&#10;                    TextButton (&#10;                        onClick = onClearAllFilters,&#10;                        enabled = true&#10;                    ) {&#10;                        Text(&quot;Clear all&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(8.dp))&#10;&#10;        // Bottom sheet host - renders with latest state&#10;        ReusableBottomSheetHost(&#10;            show = showBottomSheet,&#10;            onDismissRequest = { showBottomSheet = false },&#10;            sheetContent = {&#10;                when (currentSheet) {&#10;                    FilterSheet.Type -&gt; TypeFilterBottomSheetContent(&#10;                        selectedTypes = selectedTypes,&#10;                        onToggleType = onToggleType,&#10;                    )&#10;                    FilterSheet.Cleanliness -&gt; CleanlinessFilterBottomSheetContent(&#10;                        selectedCleanliness = selectedCleanliness,&#10;                        onToggleCleanliness = onToggleCleanliness,&#10;                    )&#10;                    FilterSheet.Radius -&gt; RadiusFilterBottomSheetContent(&#10;                        currentMeters = radiusMeters,&#10;                        onMetersChange = onRadiusMetersChange,&#10;                        onApply = { onRadiusChangeFinished() }&#10;                    )&#10;                    FilterSheet.Date -&gt; DateFilterBottomSheetContent(&#10;                        selectedPreset = dateFilterPreset,&#10;                        onPresetChange = onSetDatePreset,&#10;                        onCustomRangeSelected = { start, end -&gt; onSetCustomDateRange(start, end) },&#10;                        currentStartDateMillis = customStartDateMillis,&#10;                        currentEndDateMillis = customEndDateMillis,&#10;                    )&#10;                    FilterSheet.SortBy -&gt; SortByBottomSheetContent(&#10;                        selected = sortBy,&#10;                        onSelectedChange = { option -&gt;&#10;                            onSetSortBy(option)&#10;                            showBottomSheet = false&#10;                        }&#10;                    )&#10;                    null -&gt; {}&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun NoResultsRow() {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(top = 12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Outlined.Search,&#10;            contentDescription = null,&#10;            tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            modifier = Modifier.size(20.dp)&#10;        )&#10;        Spacer(Modifier.width(8.dp))&#10;        Text(&#10;            text = &quot;No results&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun SearchSuggestionItem(&#10;    isFirst: Boolean,&#10;    isLast: Boolean,&#10;    title: String,&#10;    type: SpotTypeEnum,&#10;    cleanliness: CleanlinessLevelEnum,&#10;    author: String?,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Surface(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(&#10;                top = if (isFirst) 8.dp else 0.dp,&#10;                bottom = if (isLast) 8.dp else 0.dp&#10;            ),&#10;        shape = MaterialTheme.shapes.large,&#10;        color = MaterialTheme.colorScheme.background,&#10;        tonalElevation = 1.dp&#10;    ) {&#10;        ListItem(&#10;            leadingContent = {&#10;                Icon(&#10;                    imageVector = type.icon(),&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(20.dp),&#10;                    tint = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            },&#10;            headlineContent = {&#10;                Text(&#10;                    text = title,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            },&#10;            supportingContent = {&#10;                Row(horizontalArrangement = Arrangement.spacedBy(8.dp), verticalAlignment = Alignment.CenterVertically) {&#10;                    Text(&#10;                        text = type.toDisplayName(),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&quot;•&quot;, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    Icon(&#10;                        imageVector = cleanliness.icon(),&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(14.dp),&#10;                        tint = cleanliness.getColor()&#10;                    )&#10;                    Text(&#10;                        text = cleanliness.toDisplayName(),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = cleanliness.getColor()&#10;                    )&#10;                    author?.let {&#10;                        Text(&#10;                            text = &quot;• by $it&quot;,&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { onClick() }&#10;        )&#10;    }&#10;}&#10;&#10;private fun formatRadius(meters: Int): String {&#10;    return if (meters &lt; 1000) &quot;$meters m&quot; else &quot;${meters / 1000} km&quot;&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.all_spots&#10;&#10;import androidx.compose.animation.Crossfade&#10;import androidx.compose.animation.core.FastOutSlowInEasing&#10;import androidx.compose.animation.core.animateDpAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.text.input.TextFieldState&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.outlined.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.semantics.isTraversalGroup&#10;import androidx.compose.ui.semantics.semantics&#10;import androidx.compose.ui.semantics.traversalIndex&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.launch&#10;import rs.gospaleks.waterspot.domain.model.CleanlinessLevelEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotTypeEnum&#10;import rs.gospaleks.waterspot.domain.model.SpotWithUser&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.getColor&#10;import rs.gospaleks.waterspot.presentation.components.ReusableBottomSheetHost&#10;import rs.gospaleks.waterspot.presentation.screens.all_spots.components.CleanlinessFilterBottomSheetContent&#10;import rs.gospaleks.waterspot.presentation.screens.all_spots.components.RadiusFilterBottomSheetContent&#10;import rs.gospaleks.waterspot.presentation.screens.all_spots.components.TypeFilterBottomSheetContent&#10;import rs.gospaleks.waterspot.presentation.screens.all_spots.components.DateFilterBottomSheetContent&#10;import rs.gospaleks.waterspot.presentation.screens.all_spots.components.SortByBottomSheetContent&#10;&#10;private enum class FilterSheet { Type, Cleanliness, Radius, Date, SortBy }&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SearchAndFilter(&#10;    textFieldState: TextFieldState,&#10;    searchResults: List&lt;SpotWithUser&gt;,&#10;    selectedTypes: Set&lt;SpotTypeEnum&gt;,&#10;    onToggleType: (SpotTypeEnum) -&gt; Unit,&#10;    selectedCleanliness: Set&lt;CleanlinessLevelEnum&gt;,&#10;    onToggleCleanliness: (CleanlinessLevelEnum) -&gt; Unit,&#10;    radiusMeters: Int,&#10;    onRadiusMetersChange: (Int) -&gt; Unit,&#10;    onRadiusChangeFinished: () -&gt; Unit,&#10;    onQueryChange: (String) -&gt; Unit,&#10;    onClearAllFilters: () -&gt; Unit,&#10;    // Date filter&#10;    dateFilterPreset: DateFilterPreset,&#10;    customStartDateMillis: Long?,&#10;    customEndDateMillis: Long?,&#10;    onSetDatePreset: (DateFilterPreset) -&gt; Unit,&#10;    onSetCustomDateRange: (Long?, Long?) -&gt; Unit,&#10;    // Sort by&#10;    sortBy: SortByOption,&#10;    onSetSortBy: (SortByOption) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var expanded by rememberSaveable { mutableStateOf(false) }&#10;&#10;    // Bottom sheet host state&#10;    var showBottomSheet by rememberSaveable { mutableStateOf(false) }&#10;    var currentSheet by rememberSaveable { mutableStateOf&lt;FilterSheet?&gt;(null) }&#10;&#10;    var showSuggestions by remember { mutableStateOf(false) }&#10;&#10;    // Debounce onQueryChange to avoid filtering on every single keystroke&#10;    val coroutineScope = rememberCoroutineScope()&#10;    var searchJob by remember { mutableStateOf&lt;Job?&gt;(null) }&#10;    val debouncedOnQueryChange = remember(onQueryChange) {&#10;        { q: String -&gt;&#10;            searchJob?.cancel()&#10;            searchJob = coroutineScope.launch {&#10;                delay(300)&#10;                onQueryChange(q)&#10;            }&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(expanded) {&#10;        if (expanded) {&#10;            delay(200) // sačekaj da animacija završi da se rastereti lag&#10;            showSuggestions = true&#10;        } else {&#10;            showSuggestions = false&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier&#10;            .background(MaterialTheme.colorScheme.surface)&#10;            .semantics { isTraversalGroup = true }&#10;    ) {&#10;        val targetPadding = if (expanded) 0.dp else 24.dp&#10;        val animatedPadding by animateDpAsState(&#10;            targetValue = targetPadding,&#10;            animationSpec = tween(durationMillis = 220, easing = FastOutSlowInEasing),&#10;            label = &quot;searchBarHorizontalPadding&quot;&#10;        )&#10;&#10;        Box(modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = animatedPadding)&#10;        ) {&#10;            val queryString = textFieldState.text.toString()&#10;&#10;            SearchBar(&#10;                modifier = Modifier&#10;                    .semantics { traversalIndex = 0f }&#10;                    .fillMaxWidth(),&#10;                inputField = {&#10;                    SearchBarDefaults.InputField(&#10;                        query = queryString,&#10;                        onQueryChange = {&#10;                            textFieldState.edit { replace(0, length, it) }&#10;                            // Debounced propagation to ViewModel&#10;                            debouncedOnQueryChange(it)&#10;                        },&#10;                        onSearch = {&#10;                            onQueryChange(queryString)&#10;                            expanded = false&#10;                        },&#10;                        expanded = expanded,&#10;                        onExpandedChange = { expanded = it },&#10;                        placeholder = { Text(&quot;Search&quot;) },&#10;                        leadingIcon = {&#10;                            Crossfade(targetState = expanded, label = &quot;leadingIconCrossfade&quot;) { isExpanded -&gt;&#10;                                if (isExpanded) {&#10;                                    Icon(&#10;                                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                        contentDescription = &quot;Back&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(18.dp)&#10;                                            .clickable { expanded = false }&#10;                                    )&#10;                                } else {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Search,&#10;                                        contentDescription = null,&#10;                                        modifier = Modifier.size(18.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                        },&#10;                        trailingIcon = {&#10;                            Crossfade(targetState = queryString.isNotEmpty(), label = &quot;trailingIconCrossfade&quot;) { show -&gt;&#10;                                if (show) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Close,&#10;                                        contentDescription = &quot;Clear&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(18.dp)&#10;                                            .clickable {&#10;                                                textFieldState.edit { replace(0, length, &quot;&quot;) }&#10;                                                onQueryChange(&quot;&quot;)&#10;                                            }&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                },&#10;                expanded = expanded,&#10;                onExpandedChange = { expanded = it },&#10;            ) {&#10;                // Fullscreen, scrollable suggestions area&#10;                if (showSuggestions &amp;&amp; queryString.isNotBlank()) {&#10;                    LazyColumn(&#10;                        modifier = Modifier&#10;                            .fillMaxSize(),&#10;                        contentPadding = PaddingValues(horizontal = 24.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        if (searchResults.isEmpty()) {&#10;                            item { NoResultsRow() }&#10;                        } else {&#10;                            val maxItems = 30&#10;                            val count =&#10;                                if (searchResults.size &gt; maxItems) maxItems else searchResults.size&#10;                            items(&#10;                                count = count,&#10;                                key = { idx -&gt; searchResults[idx].spot.id }) { idx -&gt;&#10;                                val item = searchResults[idx]&#10;                                val spot = item.spot&#10;                                val isFirst = idx == 0&#10;                                val isLast = idx == count - 1&#10;                                SearchSuggestionItem(&#10;                                    isFirst = isFirst,&#10;                                    isLast = isLast,&#10;                                    title = spot.description?.ifBlank { spot.type.toDisplayName() }&#10;                                        ?: spot.type.toDisplayName(),&#10;                                    type = spot.type,&#10;                                    cleanliness = spot.cleanliness,&#10;                                    author = item.user?.fullName,&#10;                                    onClick = {&#10;                                        val queryToApply =&#10;                                            spot.description?.takeIf { it.isNotBlank() }&#10;                                                ?: spot.type.name&#10;                                        textFieldState.edit { replace(0, length, queryToApply) }&#10;                                        onQueryChange(queryToApply)&#10;                                        expanded = false&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(8.dp))&#10;&#10;        // Gmail-like filters row -&gt; LazyRow with chips + clear icon&#10;        val hasActiveFilters = selectedTypes.isNotEmpty() || selectedCleanliness.isNotEmpty() || radiusMeters != DEFAULT_RADIUS_METERS || dateFilterPreset != DateFilterPreset.ANY || (customStartDateMillis != null || customEndDateMillis != null)&#10;        LazyRow(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            contentPadding = PaddingValues(horizontal = 24.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            item {&#10;                FilterChip(&#10;                    selected = selectedTypes.isNotEmpty(),&#10;                    onClick = {&#10;                        currentSheet = FilterSheet.Type&#10;                        showBottomSheet = true&#10;                    },&#10;                    label = {&#10;                        val count = selectedTypes.size&#10;                        Text(if (count == 0) &quot;Type&quot; else &quot;Type ($count)&quot;)&#10;                    }&#10;                )&#10;            }&#10;            item {&#10;                FilterChip(&#10;                    selected = selectedCleanliness.isNotEmpty(),&#10;                    onClick = {&#10;                        currentSheet = FilterSheet.Cleanliness&#10;                        showBottomSheet = true&#10;                    },&#10;                    label = {&#10;                        val count = selectedCleanliness.size&#10;                        Text(if (count == 0) &quot;Cleanliness&quot; else &quot;Cleanliness ($count)&quot;)&#10;                    }&#10;                )&#10;            }&#10;            item {&#10;                FilterChip(&#10;                    selected = radiusMeters != DEFAULT_RADIUS_METERS,&#10;                    onClick = {&#10;                        currentSheet = FilterSheet.Radius&#10;                        showBottomSheet = true&#10;                    },&#10;                    label = {&#10;                        Text(&quot;Radius: ${formatRadius(radiusMeters)}&quot;)&#10;                    }&#10;                )&#10;            }&#10;            item {&#10;                val dateLabel = when (dateFilterPreset) {&#10;                    DateFilterPreset.ANY -&gt; &quot;Date&quot;&#10;                    DateFilterPreset.OLDER_WEEK -&gt; &quot;Older than a week&quot;&#10;                    DateFilterPreset.OLDER_MONTH -&gt; &quot;Older than a month&quot;&#10;                    DateFilterPreset.OLDER_6_MONTHS -&gt; &quot;Older than 6 mont...&quot;&#10;                    DateFilterPreset.OLDER_YEAR -&gt; &quot;Older than a year&quot;&#10;                    DateFilterPreset.CUSTOM -&gt; &quot;Date: Custom&quot;&#10;                }&#10;&#10;                val dateSelected = dateFilterPreset != DateFilterPreset.ANY || (customStartDateMillis != null || customEndDateMillis != null)&#10;&#10;                FilterChip(&#10;                    selected = dateSelected,&#10;                    onClick = {&#10;                        currentSheet = FilterSheet.Date&#10;                        showBottomSheet = true&#10;                    },&#10;                    label = { Text(text = dateLabel) }&#10;                )&#10;            }&#10;            item {&#10;                val sortLabel = when (sortBy) {&#10;                    SortByOption.UPDATED_DESC -&gt; &quot;Updated: Newest&quot;&#10;                    SortByOption.UPDATED_ASC -&gt; &quot;Updated: Oldest&quot;&#10;                    SortByOption.CREATED_DESC -&gt; &quot;Created: Newest&quot;&#10;                    SortByOption.CREATED_ASC -&gt; &quot;Created: Oldest&quot;&#10;                }&#10;&#10;                FilterChip(&#10;                    selected = true,&#10;                    onClick = {&#10;                        currentSheet = FilterSheet.SortBy&#10;                        showBottomSheet = true&#10;                    },&#10;                    label = { Text(text = sortLabel) },&#10;                )&#10;            }&#10;            item {&#10;                if (hasActiveFilters) {&#10;                    TextButton (&#10;                        onClick = onClearAllFilters,&#10;                        enabled = true&#10;                    ) {&#10;                        Text(&quot;Clear all&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(8.dp))&#10;&#10;        // Bottom sheet host - renders with latest state&#10;        ReusableBottomSheetHost(&#10;            show = showBottomSheet,&#10;            onDismissRequest = { showBottomSheet = false },&#10;            sheetContent = {&#10;                when (currentSheet) {&#10;                    FilterSheet.Type -&gt; TypeFilterBottomSheetContent(&#10;                        selectedTypes = selectedTypes,&#10;                        onToggleType = onToggleType,&#10;                    )&#10;                    FilterSheet.Cleanliness -&gt; CleanlinessFilterBottomSheetContent(&#10;                        selectedCleanliness = selectedCleanliness,&#10;                        onToggleCleanliness = onToggleCleanliness,&#10;                    )&#10;                    FilterSheet.Radius -&gt; RadiusFilterBottomSheetContent(&#10;                        currentMeters = radiusMeters,&#10;                        onMetersChange = onRadiusMetersChange,&#10;                        onApply = { onRadiusChangeFinished() }&#10;                    )&#10;                    FilterSheet.Date -&gt; DateFilterBottomSheetContent(&#10;                        selectedPreset = dateFilterPreset,&#10;                        onPresetChange = onSetDatePreset,&#10;                        onCustomRangeSelected = { start, end -&gt; onSetCustomDateRange(start, end) },&#10;                        currentStartDateMillis = customStartDateMillis,&#10;                        currentEndDateMillis = customEndDateMillis,&#10;                    )&#10;                    FilterSheet.SortBy -&gt; SortByBottomSheetContent(&#10;                        selected = sortBy,&#10;                        onSelectedChange = { option -&gt;&#10;                            onSetSortBy(option)&#10;                            showBottomSheet = false&#10;                        }&#10;                    )&#10;                    null -&gt; {}&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun NoResultsRow() {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(top = 12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Outlined.Search,&#10;            contentDescription = null,&#10;            tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            modifier = Modifier.size(20.dp)&#10;        )&#10;        Spacer(Modifier.width(8.dp))&#10;        Text(&#10;            text = &quot;No results&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun SearchSuggestionItem(&#10;    isFirst: Boolean,&#10;    isLast: Boolean,&#10;    title: String,&#10;    type: SpotTypeEnum,&#10;    cleanliness: CleanlinessLevelEnum,&#10;    author: String?,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Surface(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(&#10;                top = if (isFirst) 8.dp else 0.dp,&#10;                bottom = if (isLast) 8.dp else 0.dp&#10;            ),&#10;        shape = MaterialTheme.shapes.large,&#10;        color = MaterialTheme.colorScheme.background,&#10;        tonalElevation = 1.dp&#10;    ) {&#10;        ListItem(&#10;            leadingContent = {&#10;                Icon(&#10;                    imageVector = type.icon(),&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(20.dp),&#10;                    tint = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            },&#10;            headlineContent = {&#10;                Text(&#10;                    text = title,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            },&#10;            supportingContent = {&#10;                Row(horizontalArrangement = Arrangement.spacedBy(8.dp), verticalAlignment = Alignment.CenterVertically) {&#10;                    Text(&#10;                        text = type.toDisplayName(),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&quot;•&quot;, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    Icon(&#10;                        imageVector = cleanliness.icon(),&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(14.dp),&#10;                        tint = cleanliness.getColor()&#10;                    )&#10;                    Text(&#10;                        text = cleanliness.toDisplayName(),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = cleanliness.getColor()&#10;                    )&#10;                    author?.let {&#10;                        Text(&#10;                            text = &quot;• by $it&quot;,&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { onClick() }&#10;        )&#10;    }&#10;}&#10;&#10;private fun formatRadius(meters: Int): String {&#10;    return if (meters &lt; 1000) &quot;$meters m&quot; else &quot;${meters / 1000} km&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.domain.model.User&#10;import rs.gospaleks.waterspot.presentation.components.CleanlinessChip&#10;import rs.gospaleks.waterspot.R&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    selectedSpotId: String? = null,&#10;    onDismiss: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onLoadSpotDetails: (String) -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    LaunchedEffect(selectedSpotId) {&#10;        selectedSpotId?.let { spotId -&gt;&#10;            // Mala pauza da se animacija otvaranja završi&#10;            delay(200)&#10;            onLoadSpotDetails(spotId)&#10;        }&#10;    }&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading || spotDetails == null) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight(0.5f)&#10;                        .fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center,&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                SpotDetailsContent(&#10;                    spotDetails = spotDetails,&#10;                    onNavigateClick = onNavigateClick,&#10;                    onReviewClick = onReviewClick,&#10;                    onUserProfileClick = onUserProfileClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotDetailsContent(&#10;    spotDetails: SpotDetails,&#10;    onReviewClick: () -&gt; Unit = {},&#10;    onNavigateClick: () -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Photo&#10;        spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;            AsyncImage(&#10;                model = photoUrl,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .aspectRatio(4f / 3f)&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Header with type and date&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Type with icon&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = spotDetails.spot.type.icon(),&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;&#10;            // Cleanliness chip&#10;            CleanlinessChip(&#10;                cleanliness = spotDetails.spot.cleanliness,&#10;                modifier = Modifier.wrapContentWidth()&#10;            )&#10;        }&#10;&#10;        // Description&#10;        spotDetails.spot.description?.let { description -&gt;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = description,&#10;                modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;&#10;        // Clickable user info&#10;        spotDetails.user?.let { user -&gt;&#10;            PostedByCard(user, onUserProfileClick)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Action buttons&#10;        ActionsButtons(&#10;            onNavigateClick = onNavigateClick,&#10;            onReviewClick = onReviewClick&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PostedByCard(&#10;    user: User,&#10;    onUserProfileClick: () -&gt; Unit,&#10;) {&#10;    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;    Card(&#10;        onClick = onUserProfileClick,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            AsyncImage(&#10;                model = user.profilePictureUrl,&#10;                contentDescription = &quot;Profile picture&quot;,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = stringResource(R.string.spot_details_posted_by),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = user.fullName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionsButtons(&#10;    onNavigateClick: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;) {&#10;    Row(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Button(&#10;            onClick = onNavigateClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Navigation,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_navigate_button))&#10;        }&#10;&#10;        OutlinedButton(&#10;            onClick = onReviewClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Outlined.Report,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_review_button))&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.domain.model.User&#10;import rs.gospaleks.waterspot.presentation.components.CleanlinessChip&#10;import rs.gospaleks.waterspot.R&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    selectedSpotId: String? = null,&#10;    onDismiss: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onLoadSpotDetails: (String) -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    LaunchedEffect(selectedSpotId) {&#10;        selectedSpotId?.let { spotId -&gt;&#10;            // Mala pauza da se animacija otvaranja završi&#10;            delay(200)&#10;            onLoadSpotDetails(spotId)&#10;        }&#10;    }&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading || spotDetails == null) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight(0.5f)&#10;                        .fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center,&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                SpotDetailsContent(&#10;                    spotDetails = spotDetails,&#10;                    onNavigateClick = onNavigateClick,&#10;                    onReviewClick = onReviewClick,&#10;                    onUserProfileClick = onUserProfileClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotDetailsContent(&#10;    spotDetails: SpotDetails,&#10;    onReviewClick: () -&gt; Unit = {},&#10;    onNavigateClick: () -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Photo&#10;        spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;            AsyncImage(&#10;                model = photoUrl,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .aspectRatio(4f / 3f)&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Header with type and date&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Type with icon&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = spotDetails.spot.type.icon(),&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;&#10;            // Cleanliness chip&#10;            CleanlinessChip(&#10;                cleanliness = spotDetails.spot.cleanliness,&#10;                modifier = Modifier.wrapContentWidth()&#10;            )&#10;        }&#10;&#10;        // Description&#10;        spotDetails.spot.description?.let { description -&gt;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = description,&#10;                modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;&#10;        // Clickable user info&#10;        spotDetails.user?.let { user -&gt;&#10;            PostedByCard(user, onUserProfileClick)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Action buttons&#10;        ActionsButtons(&#10;            onNavigateClick = onNavigateClick,&#10;            onReviewClick = onReviewClick&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PostedByCard(&#10;    user: User,&#10;    onUserProfileClick: () -&gt; Unit,&#10;) {&#10;    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;    Card(&#10;        onClick = onUserProfileClick,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            AsyncImage(&#10;                model = user.profilePictureUrl,&#10;                contentDescription = &quot;Profile picture&quot;,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = stringResource(R.string.spot_details_posted_by),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = user.fullName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionsButtons(&#10;    onNavigateClick: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;) {&#10;    Row(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Button(&#10;            onClick = onNavigateClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Navigation,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_navigate_button))&#10;        }&#10;&#10;        OutlinedButton(&#10;            onClick = onReviewClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Outlined.Report,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_review_button))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/profile/UserRank.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/profile/UserRank.kt" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.profile&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.EmojiEvents&#10;import androidx.compose.material.icons.filled.Explore&#10;import androidx.compose.material.icons.filled.Map&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import rs.gospaleks.waterspot.R&#10;&#10;enum class UserRank(&#10;    val minPoints: Int,&#10;    val maxPoints: Int?,&#10;    val color: Color,&#10;    val icon: @Composable () -&gt; Unit&#10;) {&#10;    Explorer(&#10;        0, 19,&#10;        Color(0xFF42A5F5),&#10;        { Icon(Icons.Filled.Explore, contentDescription = &quot;Explorer&quot;, tint = Color.White) }&#10;    ),&#10;    Contributor(&#10;        20, 59,&#10;        Color(0xFF66BB6A),&#10;        { Icon(Icons.Filled.Star, contentDescription = &quot;Contributor&quot;, tint = Color.White) }&#10;    ),&#10;    Scout(&#10;        60, 99,&#10;        Color(0xFFFFA726),&#10;        { Icon(Icons.Filled.Search, contentDescription = &quot;Scout&quot;, tint = Color.White) }&#10;    ),&#10;    Guide(&#10;        100, 199,&#10;        Color(0xFFAB47BC),&#10;        { Icon(Icons.Filled.Map, contentDescription = &quot;Guide&quot;, tint = Color.White) }&#10;    ),&#10;    WaterGuardian(&#10;        200, null,&#10;        Color(0xFFFFD700),&#10;        { Icon(Icons.Filled.EmojiEvents, contentDescription = &quot;Water Guardian&quot;, tint = Color.White) }&#10;    );&#10;&#10;    companion object {&#10;        fun fromPoints(points: Int): UserRank {&#10;            return entries.first { rank -&gt;&#10;                (points &gt;= rank.minPoints) &amp;&amp; (rank.maxPoints?.let { points &lt;= it } ?: true)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UserRank.toDisplayName(): String = stringResource(&#10;    when (this) {&#10;        UserRank.Explorer -&gt; R.string.rank_explorer&#10;        UserRank.Contributor -&gt; R.string.rank_contributor&#10;        UserRank.Scout -&gt; R.string.rank_scout&#10;        UserRank.Guide -&gt; R.string.rank_guide&#10;        UserRank.WaterGuardian -&gt; R.string.rank_water_guardian&#10;    }&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>