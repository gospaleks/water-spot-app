<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="import org.jetbrains.kotlin.gradle.dsl.JvmTarget&#10;import java.util.Properties&#10;import java.io.FileInputStream&#10;&#10;val localProps = Properties().apply {&#10;    load(FileInputStream(rootProject.file(&quot;local.properties&quot;)))&#10;}&#10;val mapsApiKey: String = localProps.getProperty(&quot;MAPS_API_KEY&quot;) ?: &quot;&quot;&#10;&#10;android.buildFeatures.buildConfig = true&#10;&#10;plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;com.google.devtools.ksp&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;    alias(libs.plugins.google.gms.google.services)&#10;    id(&quot;org.jetbrains.kotlin.plugin.serialization&quot;) version &quot;2.2.0&quot;&#10;}&#10;&#10;buildscript {&#10;    dependencies {&#10;        classpath(libs.secrets.gradle.plugin)&#10;    }&#10;}&#10;&#10;android {&#10;    namespace = &quot;rs.gospaleks.waterspot&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;rs.gospaleks.waterspot&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;        manifestPlaceholders[&quot;MAPS_API_KEY&quot;] = mapsApiKey&#10;&#10;        buildConfigField(&quot;String&quot;, &quot;CLOUDINARY_CLOUD_NAME&quot;, &quot;\&quot;${localProps[&quot;CLOUDINARY_CLOUD_NAME&quot;]}\&quot;&quot;)&#10;        buildConfigField(&quot;String&quot;, &quot;CLOUDINARY_API_KEY&quot;, &quot;\&quot;${localProps[&quot;CLOUDINARY_API_KEY&quot;]}\&quot;&quot;)&#10;        buildConfigField(&quot;String&quot;, &quot;CLOUDINARY_API_SECRET&quot;, &quot;\&quot;${localProps[&quot;CLOUDINARY_API_SECRET&quot;]}\&quot;&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlin {&#10;        compilerOptions {&#10;            jvmTarget.set(JvmTarget.JVM_11)&#10;        }&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.cloudinary.android) {&#10;        exclude(group = &quot;com.facebook.fresco&quot;) // Exclude Fresco to avoid conflicts with Coil and 16KB paging issue&#10;    }&#10;&#10;    // Google Maps&#10;    implementation(libs.maps.compose)&#10;    implementation (libs.play.services.maps)&#10;    implementation (libs.play.services.location)&#10;&#10;    // Firebase Auth&#10;    implementation(libs.firebase.auth)&#10;&#10;    // Firebase Firestore&#10;    implementation(libs.firebase.firestore)&#10;&#10;    // Firebase Storage&#10;    implementation(libs.firebase.storage)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    implementation(libs.androidx.hilt.navigation.compose)&#10;    ksp(libs.hilt.compiler)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;&#10;    // Navigation&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // Icons&#10;    implementation(libs.androidx.material.icons.extended)&#10;&#10;    // Coil for image loading&#10;    implementation(libs.coil.compose)&#10;&#10;    // Permission library&#10;    implementation(libs.accompanist.permissions)&#10;&#10;    // Datastore for preferences (theme, services, etc.)&#10;    implementation(libs.androidx.datastore.preferences)&#10;&#10;    // Geofire for geographic queries (get all spots within a certain radius)&#10;    implementation(libs.geofire.android.common)&#10;&#10;    // Splash Screen&#10;    implementation(libs.androidx.core.splashscreen)&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="import org.jetbrains.kotlin.gradle.dsl.JvmTarget&#10;import java.util.Properties&#10;import java.io.FileInputStream&#10;&#10;val localProps = Properties().apply {&#10;    load(FileInputStream(rootProject.file(&quot;local.properties&quot;)))&#10;}&#10;val mapsApiKey: String = localProps.getProperty(&quot;MAPS_API_KEY&quot;) ?: &quot;&quot;&#10;&#10;android.buildFeatures.buildConfig = true&#10;&#10;plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;com.google.devtools.ksp&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;    alias(libs.plugins.google.gms.google.services)&#10;    id(&quot;org.jetbrains.kotlin.plugin.serialization&quot;) version &quot;2.2.0&quot;&#10;}&#10;&#10;buildscript {&#10;    dependencies {&#10;        classpath(libs.secrets.gradle.plugin)&#10;    }&#10;}&#10;&#10;android {&#10;    namespace = &quot;rs.gospaleks.waterspot&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;rs.gospaleks.waterspot&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;        manifestPlaceholders[&quot;MAPS_API_KEY&quot;] = mapsApiKey&#10;&#10;        buildConfigField(&quot;String&quot;, &quot;CLOUDINARY_CLOUD_NAME&quot;, &quot;\&quot;${localProps[&quot;CLOUDINARY_CLOUD_NAME&quot;]}\&quot;&quot;)&#10;        buildConfigField(&quot;String&quot;, &quot;CLOUDINARY_API_KEY&quot;, &quot;\&quot;${localProps[&quot;CLOUDINARY_API_KEY&quot;]}\&quot;&quot;)&#10;        buildConfigField(&quot;String&quot;, &quot;CLOUDINARY_API_SECRET&quot;, &quot;\&quot;${localProps[&quot;CLOUDINARY_API_SECRET&quot;]}\&quot;&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlin {&#10;        compilerOptions {&#10;            jvmTarget.set(JvmTarget.JVM_11)&#10;        }&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.cloudinary.android) {&#10;        exclude(group = &quot;com.facebook.fresco&quot;) // Exclude Fresco to avoid conflicts with Coil and 16KB paging issue&#10;    }&#10;&#10;    // Google Maps&#10;    implementation(libs.maps.compose)&#10;    implementation (libs.play.services.maps)&#10;    implementation (libs.play.services.location)&#10;&#10;    // Firebase Auth&#10;    implementation(libs.firebase.auth)&#10;&#10;    // Firebase Firestore&#10;    implementation(libs.firebase.firestore)&#10;&#10;    // Firebase Storage&#10;    implementation(libs.firebase.storage)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    implementation(libs.androidx.hilt.navigation.compose)&#10;    ksp(libs.hilt.compiler)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;&#10;    // Navigation&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // Icons&#10;    implementation(libs.androidx.material.icons.extended)&#10;&#10;    // Compose Animation for transitions&#10;    implementation(libs.androidx.animation)&#10;&#10;    // Coil for image loading&#10;    implementation(libs.coil.compose)&#10;&#10;    // Permission library&#10;    implementation(libs.accompanist.permissions)&#10;&#10;    // Datastore for preferences (theme, services, etc.)&#10;    implementation(libs.androidx.datastore.preferences)&#10;&#10;    // Geofire for geographic queries (get all spots within a certain radius)&#10;    implementation(libs.geofire.android.common)&#10;&#10;    // Splash Screen&#10;    implementation(libs.androidx.core.splashscreen)&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/navigation/graphs/AddSpotNavGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/navigation/graphs/AddSpotNavGraph.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.navigation.graphs&#10;&#10;import androidx.compose.runtime.remember&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavGraphBuilder&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navigation&#10;import rs.gospaleks.waterspot.presentation.navigation.AddSpotRouteScreen&#10;import rs.gospaleks.waterspot.presentation.navigation.Graph&#10;import rs.gospaleks.waterspot.presentation.screens.add_spot.AddSpotDetailsScreen&#10;import rs.gospaleks.waterspot.presentation.screens.add_spot.AddSpotPhotoScreen&#10;import rs.gospaleks.waterspot.presentation.screens.add_spot.AddSpotScreen&#10;import rs.gospaleks.waterspot.presentation.screens.add_spot.AddSpotViewModel&#10;&#10;fun NavGraphBuilder.addSpotNavGraph(&#10;    rootNavHostController: NavHostController,&#10;) {&#10;    navigation(&#10;        route = Graph.ADD_SPOT_GRAPH,&#10;        startDestination = AddSpotRouteScreen.AddSpot.route&#10;    ) {&#10;        composable(AddSpotRouteScreen.AddSpot.route) { backStackEntry -&gt;&#10;            val parentEntry = remember(backStackEntry) {&#10;                rootNavHostController.getBackStackEntry(Graph.ADD_SPOT_GRAPH)&#10;            }&#10;            val viewModel = hiltViewModel&lt;AddSpotViewModel&gt;(parentEntry)&#10;&#10;            AddSpotScreen(&#10;                viewModel = viewModel,&#10;                onBackClick = {&#10;                    rootNavHostController.popBackStack()&#10;                },&#10;                onNextClick = {&#10;                    rootNavHostController.navigate(AddSpotRouteScreen.AddSpotPhoto.route)&#10;                }&#10;            )&#10;        }&#10;        composable(AddSpotRouteScreen.AddSpotPhoto.route) { backStackEntry -&gt;&#10;            val parentEntry = remember(backStackEntry) {&#10;                rootNavHostController.getBackStackEntry(Graph.ADD_SPOT_GRAPH)&#10;            }&#10;            val viewModel = hiltViewModel&lt;AddSpotViewModel&gt;(parentEntry)&#10;&#10;            AddSpotPhotoScreen(&#10;                viewModel = viewModel,&#10;                onBackClick = {&#10;                    rootNavHostController.popBackStack()&#10;                },&#10;                onNextClick = {&#10;                    rootNavHostController.navigate(AddSpotRouteScreen.AddSpotDetails.route)&#10;                }&#10;            )&#10;        }&#10;        composable(AddSpotRouteScreen.AddSpotDetails.route) { backStackEntry -&gt;&#10;            val parentEntry = remember(backStackEntry) {&#10;                rootNavHostController.getBackStackEntry(Graph.ADD_SPOT_GRAPH)&#10;            }&#10;            val viewModel = hiltViewModel&lt;AddSpotViewModel&gt;(parentEntry)&#10;&#10;            AddSpotDetailsScreen(&#10;                viewModel = viewModel,&#10;                onBackClick = {&#10;                    rootNavHostController.popBackStack()&#10;                },&#10;                onSubmitSuccess = {&#10;                    // Navigate back to the root graph after successful submission&#10;                    // This will pop all the back stack entries in the ADD_SPOT_GRAPH&#10;                    // and navigate to the root graph&#10;                    rootNavHostController.navigate(Graph.ROOT_GRAPH) {&#10;                        popUpTo(Graph.ADD_SPOT_GRAPH) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.navigation.graphs&#10;&#10;import androidx.compose.animation.AnimatedContentTransitionScope&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.runtime.remember&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavGraphBuilder&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navigation&#10;import rs.gospaleks.waterspot.presentation.navigation.AddSpotRouteScreen&#10;import rs.gospaleks.waterspot.presentation.navigation.Graph&#10;import rs.gospaleks.waterspot.presentation.screens.add_spot.AddSpotDetailsScreen&#10;import rs.gospaleks.waterspot.presentation.screens.add_spot.AddSpotPhotoScreen&#10;import rs.gospaleks.waterspot.presentation.screens.add_spot.AddSpotScreen&#10;import rs.gospaleks.waterspot.presentation.screens.add_spot.AddSpotViewModel&#10;&#10;fun NavGraphBuilder.addSpotNavGraph(&#10;    rootNavHostController: NavHostController,&#10;) {&#10;    navigation(&#10;        route = Graph.ADD_SPOT_GRAPH,&#10;        startDestination = AddSpotRouteScreen.AddSpot.route&#10;    ) {&#10;        composable(&#10;            route = AddSpotRouteScreen.AddSpot.route,&#10;            enterTransition = {&#10;                // When returning back from AddSpotPhoto -&gt; slide in from left&#10;                slideIntoContainer(&#10;                    AnimatedContentTransitionScope.SlideDirection.Right,&#10;                    animationSpec = tween(durationMillis = 300)&#10;                )&#10;            },&#10;            exitTransition = {&#10;                // When going forward to AddSpotPhoto -&gt; slide out to left&#10;                slideOutOfContainer(&#10;                    AnimatedContentTransitionScope.SlideDirection.Left,&#10;                    animationSpec = tween(durationMillis = 300)&#10;                )&#10;            },&#10;            popEnterTransition = {&#10;                // When popping back to this screen -&gt; slide in from left&#10;                slideIntoContainer(&#10;                    AnimatedContentTransitionScope.SlideDirection.Right,&#10;                    animationSpec = tween(durationMillis = 300)&#10;                )&#10;            },&#10;            popExitTransition = {&#10;                // When leaving this screen by back navigation -&gt; slide out to right&#10;                slideOutOfContainer(&#10;                    AnimatedContentTransitionScope.SlideDirection.Right,&#10;                    animationSpec = tween(durationMillis = 300)&#10;                )&#10;            }&#10;        ) { backStackEntry -&gt;&#10;            val parentEntry = remember(backStackEntry) {&#10;                rootNavHostController.getBackStackEntry(Graph.ADD_SPOT_GRAPH)&#10;            }&#10;            val viewModel = hiltViewModel&lt;AddSpotViewModel&gt;(parentEntry)&#10;&#10;            AddSpotScreen(&#10;                viewModel = viewModel,&#10;                onBackClick = {&#10;                    rootNavHostController.popBackStack()&#10;                },&#10;                onNextClick = {&#10;                    rootNavHostController.navigate(AddSpotRouteScreen.AddSpotPhoto.route)&#10;                }&#10;            )&#10;        }&#10;        composable(&#10;            route = AddSpotRouteScreen.AddSpotPhoto.route,&#10;            enterTransition = {&#10;                // From AddSpot -&gt; slide in from right&#10;                slideIntoContainer(&#10;                    AnimatedContentTransitionScope.SlideDirection.Left,&#10;                    animationSpec = tween(durationMillis = 300)&#10;                )&#10;            },&#10;            exitTransition = {&#10;                // To AddSpotDetails -&gt; slide out to left&#10;                slideOutOfContainer(&#10;                    AnimatedContentTransitionScope.SlideDirection.Left,&#10;                    animationSpec = tween(durationMillis = 300)&#10;                )&#10;            },&#10;            popEnterTransition = {&#10;                // Coming back from AddSpotDetails -&gt; slide in from left&#10;                slideIntoContainer(&#10;                    AnimatedContentTransitionScope.SlideDirection.Right,&#10;                    animationSpec = tween(durationMillis = 300)&#10;                )&#10;            },&#10;            popExitTransition = {&#10;                // Back to AddSpot -&gt; slide out to right&#10;                slideOutOfContainer(&#10;                    AnimatedContentTransitionScope.SlideDirection.Right,&#10;                    animationSpec = tween(durationMillis = 300)&#10;                )&#10;            }&#10;        ) { backStackEntry -&gt;&#10;            val parentEntry = remember(backStackEntry) {&#10;                rootNavHostController.getBackStackEntry(Graph.ADD_SPOT_GRAPH)&#10;            }&#10;            val viewModel = hiltViewModel&lt;AddSpotViewModel&gt;(parentEntry)&#10;&#10;            AddSpotPhotoScreen(&#10;                viewModel = viewModel,&#10;                onBackClick = {&#10;                    rootNavHostController.popBackStack()&#10;                },&#10;                onNextClick = {&#10;                    rootNavHostController.navigate(AddSpotRouteScreen.AddSpotDetails.route)&#10;                }&#10;            )&#10;        }&#10;        composable(&#10;            route = AddSpotRouteScreen.AddSpotDetails.route,&#10;            enterTransition = {&#10;                // From AddSpotPhoto -&gt; slide in from right&#10;                slideIntoContainer(&#10;                    AnimatedContentTransitionScope.SlideDirection.Left,&#10;                    animationSpec = tween(durationMillis = 300)&#10;                )&#10;            },&#10;            exitTransition = {&#10;                // On leaving details forward (unlikely inside this graph) -&gt; keep consistent&#10;                slideOutOfContainer(&#10;                    AnimatedContentTransitionScope.SlideDirection.Left,&#10;                    animationSpec = tween(durationMillis = 300)&#10;                )&#10;            },&#10;            popEnterTransition = {&#10;                // When popping back from next (or leaving details) -&gt; slide in from left&#10;                slideIntoContainer(&#10;                    AnimatedContentTransitionScope.SlideDirection.Right,&#10;                    animationSpec = tween(durationMillis = 300)&#10;                )&#10;            },&#10;            popExitTransition = {&#10;                // Back to AddSpotPhoto -&gt; slide out to right&#10;                slideOutOfContainer(&#10;                    AnimatedContentTransitionScope.SlideDirection.Right,&#10;                    animationSpec = tween(durationMillis = 300)&#10;                )&#10;            }&#10;        ) { backStackEntry -&gt;&#10;            val parentEntry = remember(backStackEntry) {&#10;                rootNavHostController.getBackStackEntry(Graph.ADD_SPOT_GRAPH)&#10;            }&#10;            val viewModel = hiltViewModel&lt;AddSpotViewModel&gt;(parentEntry)&#10;&#10;            AddSpotDetailsScreen(&#10;                viewModel = viewModel,&#10;                onBackClick = {&#10;                    rootNavHostController.popBackStack()&#10;                },&#10;                onSubmitSuccess = {&#10;                    // Navigate back to the root graph after successful submission&#10;                    // This will pop all the back stack entries in the ADD_SPOT_GRAPH&#10;                    // and navigate to the root graph&#10;                    rootNavHostController.navigate(Graph.ROOT_GRAPH) {&#10;                        popUpTo(Graph.ADD_SPOT_GRAPH) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.domain.model.User&#10;import rs.gospaleks.waterspot.presentation.components.CleanlinessChip&#10;import rs.gospaleks.waterspot.R&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    selectedSpotId: String? = null,&#10;    onDismiss: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onLoadSpotDetails: (String) -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    LaunchedEffect(selectedSpotId) {&#10;        selectedSpotId?.let { spotId -&gt;&#10;            // Mala pauza da se animacija otvaranja završi&#10;            delay(200)&#10;            onLoadSpotDetails(spotId)&#10;        }&#10;    }&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading || spotDetails == null) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight(0.5f)&#10;                        .fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center,&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                SpotDetailsContent(&#10;                    spotDetails = spotDetails,&#10;                    onNavigateClick = onNavigateClick,&#10;                    onReviewClick = onReviewClick,&#10;                    onUserProfileClick = onUserProfileClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotDetailsContent(&#10;    spotDetails: SpotDetails,&#10;    onReviewClick: () -&gt; Unit = {},&#10;    onNavigateClick: () -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Photo&#10;        spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;            AsyncImage(&#10;                model = photoUrl,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .aspectRatio(4f / 3f)&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Header with type and date&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Type with icon&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = spotDetails.spot.type.icon(),&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;&#10;            // Cleanliness chip&#10;            CleanlinessChip(&#10;                cleanliness = spotDetails.spot.cleanliness,&#10;                modifier = Modifier.wrapContentWidth()&#10;            )&#10;        }&#10;&#10;        // Description&#10;        spotDetails.spot.description?.let { description -&gt;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = description,&#10;                modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;&#10;        // Clickable user info&#10;        spotDetails.user?.let { user -&gt;&#10;            PostedByCard(user, onUserProfileClick)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Action buttons&#10;        ActionsButtons(&#10;            onNavigateClick = onNavigateClick,&#10;            onReviewClick = onReviewClick&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PostedByCard(&#10;    user: User,&#10;    onUserProfileClick: () -&gt; Unit,&#10;) {&#10;    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;    Card(&#10;        onClick = onUserProfileClick,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            AsyncImage(&#10;                model = user.profilePictureUrl,&#10;                contentDescription = &quot;Profile picture&quot;,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = stringResource(R.string.spot_details_posted_by),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = user.fullName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionsButtons(&#10;    onNavigateClick: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;) {&#10;    Row(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Button(&#10;            onClick = onNavigateClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Navigation,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_navigate_button))&#10;        }&#10;&#10;        OutlinedButton(&#10;            onClick = onReviewClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Outlined.Report,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_review_button))&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.domain.model.User&#10;import rs.gospaleks.waterspot.presentation.components.CleanlinessChip&#10;import rs.gospaleks.waterspot.R&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    selectedSpotId: String? = null,&#10;    onDismiss: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onLoadSpotDetails: (String) -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    LaunchedEffect(selectedSpotId) {&#10;        selectedSpotId?.let { spotId -&gt;&#10;            // Mala pauza da se animacija otvaranja završi&#10;            delay(200)&#10;            onLoadSpotDetails(spotId)&#10;        }&#10;    }&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading || spotDetails == null) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight(0.5f)&#10;                        .fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center,&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                SpotDetailsContent(&#10;                    spotDetails = spotDetails,&#10;                    onNavigateClick = onNavigateClick,&#10;                    onReviewClick = onReviewClick,&#10;                    onUserProfileClick = onUserProfileClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotDetailsContent(&#10;    spotDetails: SpotDetails,&#10;    onReviewClick: () -&gt; Unit = {},&#10;    onNavigateClick: () -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Photo&#10;        spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;            AsyncImage(&#10;                model = photoUrl,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .aspectRatio(4f / 3f)&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Header with type and date&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Type with icon&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = spotDetails.spot.type.icon(),&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;&#10;            // Cleanliness chip&#10;            CleanlinessChip(&#10;                cleanliness = spotDetails.spot.cleanliness,&#10;                modifier = Modifier.wrapContentWidth()&#10;            )&#10;        }&#10;&#10;        // Description&#10;        spotDetails.spot.description?.let { description -&gt;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = description,&#10;                modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;&#10;        // Clickable user info&#10;        spotDetails.user?.let { user -&gt;&#10;            PostedByCard(user, onUserProfileClick)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Action buttons&#10;        ActionsButtons(&#10;            onNavigateClick = onNavigateClick,&#10;            onReviewClick = onReviewClick&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PostedByCard(&#10;    user: User,&#10;    onUserProfileClick: () -&gt; Unit,&#10;) {&#10;    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;    Card(&#10;        onClick = onUserProfileClick,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            AsyncImage(&#10;                model = user.profilePictureUrl,&#10;                contentDescription = &quot;Profile picture&quot;,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = stringResource(R.string.spot_details_posted_by),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = user.fullName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionsButtons(&#10;    onNavigateClick: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;) {&#10;    Row(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Button(&#10;            onClick = onNavigateClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Navigation,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_navigate_button))&#10;        }&#10;&#10;        OutlinedButton(&#10;            onClick = onReviewClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Outlined.Report,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_review_button))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/profile/UserRank.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/profile/UserRank.kt" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.profile&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.EmojiEvents&#10;import androidx.compose.material.icons.filled.Explore&#10;import androidx.compose.material.icons.filled.Map&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import rs.gospaleks.waterspot.R&#10;&#10;enum class UserRank(&#10;    val minPoints: Int,&#10;    val maxPoints: Int?,&#10;    val color: Color,&#10;    val icon: @Composable () -&gt; Unit&#10;) {&#10;    Explorer(&#10;        0, 19,&#10;        Color(0xFF42A5F5),&#10;        { Icon(Icons.Filled.Explore, contentDescription = &quot;Explorer&quot;, tint = Color.White) }&#10;    ),&#10;    Contributor(&#10;        20, 59,&#10;        Color(0xFF66BB6A),&#10;        { Icon(Icons.Filled.Star, contentDescription = &quot;Contributor&quot;, tint = Color.White) }&#10;    ),&#10;    Scout(&#10;        60, 99,&#10;        Color(0xFFFFA726),&#10;        { Icon(Icons.Filled.Search, contentDescription = &quot;Scout&quot;, tint = Color.White) }&#10;    ),&#10;    Guide(&#10;        100, 199,&#10;        Color(0xFFAB47BC),&#10;        { Icon(Icons.Filled.Map, contentDescription = &quot;Guide&quot;, tint = Color.White) }&#10;    ),&#10;    WaterGuardian(&#10;        200, null,&#10;        Color(0xFFFFD700),&#10;        { Icon(Icons.Filled.EmojiEvents, contentDescription = &quot;Water Guardian&quot;, tint = Color.White) }&#10;    );&#10;&#10;    companion object {&#10;        fun fromPoints(points: Int): UserRank {&#10;            return entries.first { rank -&gt;&#10;                (points &gt;= rank.minPoints) &amp;&amp; (rank.maxPoints?.let { points &lt;= it } ?: true)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UserRank.toDisplayName(): String = stringResource(&#10;    when (this) {&#10;        UserRank.Explorer -&gt; R.string.rank_explorer&#10;        UserRank.Contributor -&gt; R.string.rank_contributor&#10;        UserRank.Scout -&gt; R.string.rank_scout&#10;        UserRank.Guide -&gt; R.string.rank_guide&#10;        UserRank.WaterGuardian -&gt; R.string.rank_water_guardian&#10;    }&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;accompanistPermissions = &quot;0.37.3&quot;&#10;agp = &quot;8.12.1&quot;&#10;cloudinaryAndroid = &quot;3.1.1&quot;&#10;coilCompose = &quot;2.7.0&quot;&#10;coreSplashscreen = &quot;1.0.1&quot;&#10;datastorePreferences = &quot;1.1.7&quot;&#10;geofireAndroidCommon = &quot;3.2.0&quot;&#10;hiltAndroid = &quot;2.57&quot;&#10;hiltNavigationCompose = &quot;1.2.0&quot;&#10;kotlin = &quot;2.2.0&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2025.07.00&quot;&#10;mapsCompose = &quot;6.7.0&quot;&#10;materialIconsExtended = &quot;1.7.8&quot;&#10;navigationCompose = &quot;2.9.3&quot;&#10;googleGmsGoogleServices = &quot;4.4.3&quot;&#10;firebaseAuth = &quot;24.0.0&quot;&#10;firebaseFirestore = &quot;26.0.0&quot;&#10;firebaseStorage = &quot;22.0.0&quot;&#10;playServicesLocation = &quot;21.3.0&quot;&#10;playServicesMaps = &quot;19.2.0&quot;&#10;secretsGradlePlugin = &quot;2.0.1&quot;&#10;&#10;[libraries]&#10;accompanist-permissions = { module = &quot;com.google.accompanist:accompanist-permissions&quot;, version.ref = &quot;accompanistPermissions&quot; }&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-core-splashscreen = { module = &quot;androidx.core:core-splashscreen&quot;, version.ref = &quot;coreSplashscreen&quot; }&#10;androidx-datastore-preferences = { module = &quot;androidx.datastore:datastore-preferences&quot;, version.ref = &quot;datastorePreferences&quot; }&#10;androidx-hilt-navigation-compose = { module = &quot;androidx.hilt:hilt-navigation-compose&quot;, version.ref = &quot;hiltNavigationCompose&quot; }&#10;androidx-lifecycle-viewmodel-ktx = { module = &quot;androidx.lifecycle:lifecycle-viewmodel-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-material-icons-extended = { module = &quot;androidx.compose.material:material-icons-extended&quot;, version.ref = &quot;materialIconsExtended&quot; }&#10;androidx-navigation-compose = { module = &quot;androidx.navigation:navigation-compose&quot;, version.ref = &quot;navigationCompose&quot; }&#10;cloudinary-android = { module = &quot;com.cloudinary:cloudinary-android&quot;, version.ref = &quot;cloudinaryAndroid&quot; }&#10;coil-compose = { module = &quot;io.coil-kt:coil-compose&quot;, version.ref = &quot;coilCompose&quot; }&#10;geofire-android-common = { module = &quot;com.firebase:geofire-android-common&quot;, version.ref = &quot;geofireAndroidCommon&quot; }&#10;hilt-android = { module = &quot;com.google.dagger:hilt-android&quot;, version.ref = &quot;hiltAndroid&quot; }&#10;hilt-compiler = { module = &quot;com.google.dagger:hilt-compiler&quot;, version.ref = &quot;hiltAndroid&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;firebase-auth = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-auth&quot;, version.ref = &quot;firebaseAuth&quot; }&#10;firebase-firestore = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-firestore&quot;, version.ref = &quot;firebaseFirestore&quot; }&#10;firebase-storage = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-storage&quot;, version.ref = &quot;firebaseStorage&quot; }&#10;maps-compose = { module = &quot;com.google.maps.android:maps-compose&quot;, version.ref = &quot;mapsCompose&quot; }&#10;play-services-location = { module = &quot;com.google.android.gms:play-services-location&quot;, version.ref = &quot;playServicesLocation&quot; }&#10;play-services-maps = { module = &quot;com.google.android.gms:play-services-maps&quot;, version.ref = &quot;playServicesMaps&quot; }&#10;secrets-gradle-plugin = { module = &quot;com.google.android.libraries.mapsplatform.secrets-gradle-plugin:secrets-gradle-plugin&quot;, version.ref = &quot;secretsGradlePlugin&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;google-gms-google-services = { id = &quot;com.google.gms.google-services&quot;, version.ref = &quot;googleGmsGoogleServices&quot; }" />
              <option name="updatedContent" value="[versions]&#10;accompanistPermissions = &quot;0.37.3&quot;&#10;agp = &quot;8.12.1&quot;&#10;cloudinaryAndroid = &quot;3.1.1&quot;&#10;coilCompose = &quot;2.7.0&quot;&#10;coreSplashscreen = &quot;1.0.1&quot;&#10;datastorePreferences = &quot;1.1.7&quot;&#10;geofireAndroidCommon = &quot;3.2.0&quot;&#10;hiltAndroid = &quot;2.57&quot;&#10;hiltNavigationCompose = &quot;1.2.0&quot;&#10;kotlin = &quot;2.2.0&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2025.07.00&quot;&#10;mapsCompose = &quot;6.7.0&quot;&#10;materialIconsExtended = &quot;1.7.8&quot;&#10;navigationCompose = &quot;2.9.3&quot;&#10;googleGmsGoogleServices = &quot;4.4.3&quot;&#10;firebaseAuth = &quot;24.0.0&quot;&#10;firebaseFirestore = &quot;26.0.0&quot;&#10;firebaseStorage = &quot;22.0.0&quot;&#10;playServicesLocation = &quot;21.3.0&quot;&#10;playServicesMaps = &quot;19.2.0&quot;&#10;secretsGradlePlugin = &quot;2.0.1&quot;&#10;&#10;[libraries]&#10;accompanist-permissions = { module = &quot;com.google.accompanist:accompanist-permissions&quot;, version.ref = &quot;accompanistPermissions&quot; }&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-core-splashscreen = { module = &quot;androidx.core:core-splashscreen&quot;, version.ref = &quot;coreSplashscreen&quot; }&#10;androidx-datastore-preferences = { module = &quot;androidx.datastore:datastore-preferences&quot;, version.ref = &quot;datastorePreferences&quot; }&#10;androidx-hilt-navigation-compose = { module = &quot;androidx.hilt:hilt-navigation-compose&quot;, version.ref = &quot;hiltNavigationCompose&quot; }&#10;androidx-lifecycle-viewmodel-ktx = { module = &quot;androidx.lifecycle:lifecycle-viewmodel-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-material-icons-extended = { module = &quot;androidx.compose.material:material-icons-extended&quot;, version.ref = &quot;materialIconsExtended&quot; }&#10;androidx-navigation-compose = { module = &quot;androidx.navigation:navigation-compose&quot;, version.ref = &quot;navigationCompose&quot; }&#10;androidx-animation = { group = &quot;androidx.compose.animation&quot;, name = &quot;animation&quot; }&#10;cloudinary-android = { module = &quot;com.cloudinary:cloudinary-android&quot;, version.ref = &quot;cloudinaryAndroid&quot; }&#10;coil-compose = { module = &quot;io.coil-kt:coil-compose&quot;, version.ref = &quot;coilCompose&quot; }&#10;geofire-android-common = { module = &quot;com.firebase:geofire-android-common&quot;, version.ref = &quot;geofireAndroidCommon&quot; }&#10;hilt-android = { module = &quot;com.google.dagger:hilt-android&quot;, version.ref = &quot;hiltAndroid&quot; }&#10;hilt-compiler = { module = &quot;com.google.dagger:hilt-compiler&quot;, version.ref = &quot;hiltAndroid&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;firebase-auth = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-auth&quot;, version.ref = &quot;firebaseAuth&quot; }&#10;firebase-firestore = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-firestore&quot;, version.ref = &quot;firebaseFirestore&quot; }&#10;firebase-storage = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-storage&quot;, version.ref = &quot;firebaseStorage&quot; }&#10;maps-compose = { module = &quot;com.google.maps.android:maps-compose&quot;, version.ref = &quot;mapsCompose&quot; }&#10;play-services-location = { module = &quot;com.google.android.gms:play-services-location&quot;, version.ref = &quot;playServicesLocation&quot; }&#10;play-services-maps = { module = &quot;com.google.android.gms:play-services-maps&quot;, version.ref = &quot;playServicesMaps&quot; }&#10;secrets-gradle-plugin = { module = &quot;com.google.android.libraries.mapsplatform.secrets-gradle-plugin:secrets-gradle-plugin&quot;, version.ref = &quot;secretsGradlePlugin&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;google-gms-google-services = { id = &quot;com.google.gms.google-services&quot;, version.ref = &quot;googleGmsGoogleServices&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>