<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/components/bottom_sheet/ReviewContent.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/components/bottom_sheet/ReviewContent.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.components.bottom_sheet&#10;&#10;import android.location.Location&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.RateReview&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInteropFilter&#10;import androidx.compose.ui.unit.dp&#10;import com.google.android.gms.maps.CameraUpdateFactory&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory&#10;import com.google.android.gms.maps.model.CameraPosition&#10;import com.google.android.gms.maps.model.LatLng&#10;import com.google.android.gms.maps.model.LatLngBounds&#10;import com.google.android.gms.maps.model.MapStyleOptions&#10;import com.google.maps.android.compose.Circle&#10;import com.google.maps.android.compose.GoogleMap&#10;import com.google.maps.android.compose.MapProperties&#10;import com.google.maps.android.compose.MapUiSettings&#10;import com.google.maps.android.compose.Marker&#10;import com.google.maps.android.compose.MarkerState&#10;import com.google.maps.android.compose.rememberCameraPositionState&#10;import rs.gospaleks.waterspot.domain.model.SpotWithUser&#10;&#10;&#10;@Composable&#10;fun ReviewContent(&#10;    mapStyleJson: MapStyleOptions,&#10;    data: SpotWithUser,&#10;    userLocation: LatLng?,&#10;    onBack: () -&gt; Unit,&#10;    onSubmitReview: (String) -&gt; Unit&#10;) {&#10;    val spotLatLng = LatLng(data.spot.latitude, data.spot.longitude)&#10;&#10;    val cameraPositionState = rememberCameraPositionState()&#10;&#10;    LaunchedEffect(userLocation, spotLatLng) {&#10;        if (userLocation != null) {&#10;            val bounds = LatLngBounds.builder()&#10;                .include(userLocation)&#10;                .include(spotLatLng)&#10;                .build()&#10;&#10;            // pomeranje kamere sa paddingom da ne budu marker-i skroz na ivici&#10;            cameraPositionState.animate(&#10;                update = CameraUpdateFactory.newLatLngBounds(bounds, 200)&#10;            )&#10;        } else {&#10;            // fallback ako nema userLocation&#10;            cameraPositionState.position = CameraPosition.fromLatLngZoom(spotLatLng, 17f)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 24.dp)&#10;    ) {&#10;        // Header sa &quot;Back&quot; dugmetom&#10;        Row(verticalAlignment = Alignment.CenterVertically) {&#10;            IconButton(onClick = onBack) { Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;) }&#10;            Spacer(Modifier.width(8.dp))&#10;            Text(&quot;Review&quot;, style = MaterialTheme.typography.titleMedium)&#10;        }&#10;&#10;        Spacer(Modifier.height(8.dp))&#10;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(200.dp)&#10;                .clip(RoundedCornerShape(12.dp))&#10;        ) {&#10;            GoogleMap(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .pointerInteropFilter { false },&#10;                cameraPositionState = cameraPositionState,&#10;                properties = MapProperties(&#10;                    mapStyleOptions = mapStyleJson,&#10;                    isMyLocationEnabled = userLocation != null&#10;                ),&#10;                uiSettings = MapUiSettings(&#10;                    zoomControlsEnabled = false,&#10;                    myLocationButtonEnabled = false,&#10;                    compassEnabled = false,&#10;                )&#10;            ) {&#10;                val spotMarkerState = remember { MarkerState(position = spotLatLng) }&#10;                Marker(&#10;                    state = spotMarkerState,&#10;                    icon = BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)&#10;                )&#10;&#10;                Circle(&#10;                    center = spotLatLng,&#10;                    fillColor = Color(0xFF81C784).copy(alpha = 0.4f),&#10;                    strokeColor = Color(0xFF81C784),&#10;                    strokeWidth = 4f,&#10;                    radius = 50.0,&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(12.dp))&#10;&#10;        // Distance &amp; enable/disable logic&#10;        val distanceMeters = remember(userLocation, spotLatLng) {&#10;            userLocation?.let {&#10;                val result = FloatArray(1)&#10;                Location.distanceBetween(&#10;                    it.latitude, it.longitude,&#10;                    spotLatLng.latitude, spotLatLng.longitude,&#10;                    result&#10;                )&#10;                result[0]&#10;            }&#10;        }&#10;        val isInZone = distanceMeters?.let { it &lt;= 50f } ?: false&#10;&#10;        Text(&#10;            text = if (isInZone) &quot;You are inside the 50m zone â€” you can review spot&quot;&#10;            else &quot;Move closer to leave a review (distance: ${distanceMeters?.toInt() ?: &quot;?&quot;} m)&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = if (isInZone) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;&#10;        Spacer(Modifier.height(12.dp))&#10;&#10;        // Comment input (disabled if not in zone)&#10;        var comment by remember { mutableStateOf(&quot;&quot;) }&#10;        OutlinedTextField(&#10;            value = comment,&#10;            onValueChange = { comment = it },&#10;            enabled = isInZone,&#10;            placeholder = { Text(&quot;Write your review...&quot;) },&#10;            modifier = Modifier.fillMaxWidth().height(120.dp)&#10;        )&#10;&#10;        Spacer(Modifier.height(8.dp))&#10;&#10;        Button(&#10;            onClick = {&#10;                onSubmitReview(comment)&#10;                comment = &quot;&quot;&#10;            },&#10;            enabled = isInZone &amp;&amp; comment.isNotBlank(),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Icon(Icons.Default.RateReview, contentDescription = null)&#10;            Spacer(Modifier.width(8.dp))&#10;            Text(&quot;Submit review&quot;)&#10;        }&#10;&#10;        Spacer(Modifier.height(8.dp))&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.components.bottom_sheet&#10;&#10;import android.location.Location&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.RateReview&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material.icons.outlined.Star&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInteropFilter&#10;import androidx.compose.ui.unit.dp&#10;import com.google.android.gms.maps.CameraUpdateFactory&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory&#10;import com.google.android.gms.maps.model.CameraPosition&#10;import com.google.android.gms.maps.model.LatLng&#10;import com.google.android.gms.maps.model.LatLngBounds&#10;import com.google.android.gms.maps.model.MapStyleOptions&#10;import com.google.maps.android.compose.Circle&#10;import com.google.maps.android.compose.GoogleMap&#10;import com.google.maps.android.compose.MapProperties&#10;import com.google.maps.android.compose.MapUiSettings&#10;import com.google.maps.android.compose.Marker&#10;import com.google.maps.android.compose.MarkerState&#10;import com.google.maps.android.compose.rememberCameraPositionState&#10;import rs.gospaleks.waterspot.domain.model.SpotWithUser&#10;&#10;&#10;@Composable&#10;fun ReviewContent(&#10;    mapStyleJson: MapStyleOptions,&#10;    data: SpotWithUser,&#10;    userLocation: LatLng?,&#10;    onBack: () -&gt; Unit,&#10;    onSubmitReview: (String, Float) -&gt; Unit // Update to include rating&#10;) {&#10;    val spotLatLng = LatLng(data.spot.latitude, data.spot.longitude)&#10;&#10;    val cameraPositionState = rememberCameraPositionState()&#10;&#10;    LaunchedEffect(userLocation, spotLatLng) {&#10;        if (userLocation != null) {&#10;            val bounds = LatLngBounds.builder()&#10;                .include(userLocation)&#10;                .include(spotLatLng)&#10;                .build()&#10;&#10;            // pomeranje kamere sa paddingom da ne budu marker-i skroz na ivici&#10;            cameraPositionState.animate(&#10;                update = CameraUpdateFactory.newLatLngBounds(bounds, 200)&#10;            )&#10;        } else {&#10;            // fallback ako nema userLocation&#10;            cameraPositionState.position = CameraPosition.fromLatLngZoom(spotLatLng, 17f)&#10;        }&#10;    }&#10;    &#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 24.dp)&#10;    ) {&#10;        // Header sa &quot;Back&quot; dugmetom&#10;        Row(verticalAlignment = Alignment.CenterVertically) {&#10;            IconButton(onClick = onBack) { Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;) }&#10;            Spacer(Modifier.width(8.dp))&#10;            Text(&quot;Review&quot;, style = MaterialTheme.typography.titleMedium)&#10;        }&#10;&#10;        Spacer(Modifier.height(8.dp))&#10;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(200.dp)&#10;                .clip(RoundedCornerShape(12.dp))&#10;        ) {&#10;            GoogleMap(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .pointerInteropFilter { false },&#10;                cameraPositionState = cameraPositionState,&#10;                properties = MapProperties(&#10;                    mapStyleOptions = mapStyleJson,&#10;                    isMyLocationEnabled = userLocation != null&#10;                ),&#10;                uiSettings = MapUiSettings(&#10;                    zoomControlsEnabled = false,&#10;                    myLocationButtonEnabled = false,&#10;                    compassEnabled = false,&#10;                )&#10;            ) {&#10;                val spotMarkerState = remember { MarkerState(position = spotLatLng) }&#10;                Marker(&#10;                    state = spotMarkerState,&#10;                    icon = BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)&#10;                )&#10;&#10;                Circle(&#10;                    center = spotLatLng,&#10;                    fillColor = Color(0xFF81C784).copy(alpha = 0.4f),&#10;                    strokeColor = Color(0xFF81C784),&#10;                    strokeWidth = 4f,&#10;                    radius = 50.0,&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(12.dp))&#10;&#10;        // Distance &amp; enable/disable logic&#10;        val distanceMeters = remember(userLocation, spotLatLng) {&#10;            userLocation?.let {&#10;                val result = FloatArray(1)&#10;                Location.distanceBetween(&#10;                    it.latitude, it.longitude,&#10;                    spotLatLng.latitude, spotLatLng.longitude,&#10;                    result&#10;                )&#10;                result[0]&#10;            }&#10;        }&#10;        val isInZone = distanceMeters?.let { it &lt;= 50f } ?: false&#10;&#10;        Text(&#10;            text = if (isInZone) &quot;You are inside the 50m zone â€” you can review spot&quot;&#10;            else &quot;Move closer to leave a review (distance: ${distanceMeters?.toInt() ?: &quot;?&quot;} m)&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = if (isInZone) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;&#10;        Spacer(Modifier.height(12.dp))&#10;&#10;        // Star rating component&#10;        var starRating by remember { mutableStateOf(0f) }&#10;        &#10;        Text(&#10;            text = &quot;Rate this spot:&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = MaterialTheme.colorScheme.onSurface&#10;        )&#10;        &#10;        Spacer(Modifier.height(4.dp))&#10;        &#10;        Row(&#10;            horizontalArrangement = Arrangement.Start&#10;        ) {&#10;            for (i in 1..5) {&#10;                val isSelected = i &lt;= starRating.toInt()&#10;                Icon(&#10;                    imageVector = if (isSelected) Icons.Filled.Star else Icons.Outlined.Star,&#10;                    contentDescription = &quot;Rate $i star${if (i &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;,&#10;                    tint = if (isSelected) MaterialTheme.colorScheme.primary else Color.Gray,&#10;                    modifier = Modifier&#10;                        .size(32.dp)&#10;                        .clickable(enabled = isInZone) {&#10;                            starRating = i.toFloat()&#10;                        }&#10;                )&#10;                if (i &lt; 5) Spacer(Modifier.width(4.dp))&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(12.dp))&#10;&#10;        // Comment input (disabled if not in zone)&#10;        var comment by remember { mutableStateOf(&quot;&quot;) }&#10;        OutlinedTextField(&#10;            value = comment,&#10;            onValueChange = { comment = it },&#10;            enabled = isInZone,&#10;            placeholder = { Text(&quot;Write your review...&quot;) },&#10;            modifier = Modifier.fillMaxWidth().height(120.dp)&#10;        )&#10;&#10;        Spacer(Modifier.height(8.dp))&#10;&#10;        Button(&#10;            onClick = {&#10;                onSubmitReview(comment, starRating)&#10;                comment = &quot;&quot;&#10;                starRating = 0f&#10;            },&#10;            enabled = isInZone &amp;&amp; comment.isNotBlank() &amp;&amp; starRating &gt; 0,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Icon(Icons.Default.RateReview, contentDescription = null)&#10;            Spacer(Modifier.width(8.dp))&#10;            Text(&quot;Submit review&quot;)&#10;        }&#10;&#10;        Spacer(Modifier.height(8.dp))&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.domain.model.User&#10;import rs.gospaleks.waterspot.presentation.components.CleanlinessChip&#10;import rs.gospaleks.waterspot.R&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    selectedSpotId: String? = null,&#10;    onDismiss: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onLoadSpotDetails: (String) -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    LaunchedEffect(selectedSpotId) {&#10;        selectedSpotId?.let { spotId -&gt;&#10;            // Mala pauza da se animacija otvaranja zavrÅ¡i&#10;            delay(200)&#10;            onLoadSpotDetails(spotId)&#10;        }&#10;    }&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading || spotDetails == null) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight(0.5f)&#10;                        .fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center,&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                SpotDetailsContent(&#10;                    spotDetails = spotDetails,&#10;                    onNavigateClick = onNavigateClick,&#10;                    onReviewClick = onReviewClick,&#10;                    onUserProfileClick = onUserProfileClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotDetailsContent(&#10;    spotDetails: SpotDetails,&#10;    onReviewClick: () -&gt; Unit = {},&#10;    onNavigateClick: () -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Photo&#10;        spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;            AsyncImage(&#10;                model = photoUrl,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .aspectRatio(4f / 3f)&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Header with type and date&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Type with icon&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = spotDetails.spot.type.icon(),&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;&#10;            // Cleanliness chip&#10;            CleanlinessChip(&#10;                cleanliness = spotDetails.spot.cleanliness,&#10;                modifier = Modifier.wrapContentWidth()&#10;            )&#10;        }&#10;&#10;        // Description&#10;        spotDetails.spot.description?.let { description -&gt;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = description,&#10;                modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;&#10;        // Clickable user info&#10;        spotDetails.user?.let { user -&gt;&#10;            PostedByCard(user, onUserProfileClick)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Action buttons&#10;        ActionsButtons(&#10;            onNavigateClick = onNavigateClick,&#10;            onReviewClick = onReviewClick&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PostedByCard(&#10;    user: User,&#10;    onUserProfileClick: () -&gt; Unit,&#10;) {&#10;    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;    Card(&#10;        onClick = onUserProfileClick,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            AsyncImage(&#10;                model = user.profilePictureUrl,&#10;                contentDescription = &quot;Profile picture&quot;,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = stringResource(R.string.spot_details_posted_by),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = user.fullName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionsButtons(&#10;    onNavigateClick: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;) {&#10;    Row(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Button(&#10;            onClick = onNavigateClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Navigation,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_navigate_button))&#10;        }&#10;&#10;        OutlinedButton(&#10;            onClick = onReviewClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Outlined.Report,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_review_button))&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.domain.model.User&#10;import rs.gospaleks.waterspot.presentation.components.CleanlinessChip&#10;import rs.gospaleks.waterspot.R&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    selectedSpotId: String? = null,&#10;    onDismiss: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onLoadSpotDetails: (String) -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    LaunchedEffect(selectedSpotId) {&#10;        selectedSpotId?.let { spotId -&gt;&#10;            // Mala pauza da se animacija otvaranja zavrÅ¡i&#10;            delay(200)&#10;            onLoadSpotDetails(spotId)&#10;        }&#10;    }&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading || spotDetails == null) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight(0.5f)&#10;                        .fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center,&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                SpotDetailsContent(&#10;                    spotDetails = spotDetails,&#10;                    onNavigateClick = onNavigateClick,&#10;                    onReviewClick = onReviewClick,&#10;                    onUserProfileClick = onUserProfileClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotDetailsContent(&#10;    spotDetails: SpotDetails,&#10;    onReviewClick: () -&gt; Unit = {},&#10;    onNavigateClick: () -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Photo&#10;        spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;            AsyncImage(&#10;                model = photoUrl,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .aspectRatio(4f / 3f)&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Header with type and date&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Type with icon&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = spotDetails.spot.type.icon(),&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;&#10;            // Cleanliness chip&#10;            CleanlinessChip(&#10;                cleanliness = spotDetails.spot.cleanliness,&#10;                modifier = Modifier.wrapContentWidth()&#10;            )&#10;        }&#10;&#10;        // Description&#10;        spotDetails.spot.description?.let { description -&gt;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = description,&#10;                modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;&#10;        // Clickable user info&#10;        spotDetails.user?.let { user -&gt;&#10;            PostedByCard(user, onUserProfileClick)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Action buttons&#10;        ActionsButtons(&#10;            onNavigateClick = onNavigateClick,&#10;            onReviewClick = onReviewClick&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PostedByCard(&#10;    user: User,&#10;    onUserProfileClick: () -&gt; Unit,&#10;) {&#10;    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;    Card(&#10;        onClick = onUserProfileClick,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            AsyncImage(&#10;                model = user.profilePictureUrl,&#10;                contentDescription = &quot;Profile picture&quot;,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = stringResource(R.string.spot_details_posted_by),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = user.fullName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionsButtons(&#10;    onNavigateClick: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;) {&#10;    Row(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Button(&#10;            onClick = onNavigateClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Navigation,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_navigate_button))&#10;        }&#10;&#10;        OutlinedButton(&#10;            onClick = onReviewClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Outlined.Report,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_review_button))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>