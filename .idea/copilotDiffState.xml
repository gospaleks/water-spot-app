<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/AvatarMarkerHelpers.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/AvatarMarkerHelpers.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapShader&#10;import android.graphics.Canvas&#10;import android.graphics.Color&#10;import android.graphics.Paint&#10;import android.graphics.RectF&#10;import android.graphics.Shader&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.graphics.createBitmap&#10;import androidx.core.graphics.drawable.toBitmap&#10;import androidx.core.graphics.scale&#10;import androidx.core.graphics.toColorInt&#10;import coil.ImageLoader&#10;import coil.request.ImageRequest&#10;import coil.request.SuccessResult&#10;import com.google.android.gms.maps.model.BitmapDescriptor&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory&#10;&#10;// --- Helpers for circular avatar map markers ---&#10;fun extractInitials(name: String): String {&#10;    val parts = name.trim().split(&quot; &quot;).filter { it.isNotBlank() }&#10;    val first = parts.getOrNull(0)?.firstOrNull()?.uppercaseChar()&#10;    val second = parts.getOrNull(1)?.firstOrNull()?.uppercaseChar()&#10;    return when {&#10;        first != null &amp;&amp; second != null -&gt; &quot;${'$'}first${'$'}second&quot;&#10;        first != null -&gt; first.toString()&#10;        else -&gt; &quot;?&quot;&#10;    }&#10;}&#10;&#10;suspend fun createCircularAvatarBitmap(&#10;    context: android.content.Context,&#10;    imageUrl: String?,&#10;    name: String,&#10;    sizePx: Int,&#10;): Bitmap {&#10;    val loader = ImageLoader(context)&#10;    val drawableBitmap: Bitmap? = try {&#10;        if (!imageUrl.isNullOrBlank()) {&#10;            val request = ImageRequest.Builder(context)&#10;                .data(imageUrl)&#10;                .size(sizePx)&#10;                .allowHardware(false)&#10;                .build()&#10;            val result = loader.execute(request)&#10;            val drawable = (result as? SuccessResult)?.drawable&#10;            drawable?.toBitmap(width = sizePx, height = sizePx)&#10;        } else null&#10;    } catch (_: Exception) {&#10;        null&#10;    }&#10;&#10;    // Prepare paints&#10;    val output = createBitmap(sizePx, sizePx)&#10;    val canvas = Canvas(output)&#10;    val radius = sizePx / 2f&#10;&#10;    // Background circle (slight gray)&#10;    val bgPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;        color = &quot;#F0F0F0&quot;.toColorInt()&#10;        style = Paint.Style.FILL&#10;    }&#10;    canvas.drawCircle(radius, radius, radius, bgPaint)&#10;&#10;    if (drawableBitmap != null) {&#10;        val scaled = if (drawableBitmap.width != sizePx || drawableBitmap.height != sizePx) {&#10;            drawableBitmap.scale(sizePx, sizePx)&#10;        } else drawableBitmap&#10;&#10;        val paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;            shader = BitmapShader(scaled, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP)&#10;        }&#10;        canvas.drawCircle(radius, radius, radius, paint)&#10;    } else {&#10;        // Fallback: initials&#10;        val circlePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;            color = &quot;#2196F3&quot;.toColorInt() // blue-ish&#10;            style = Paint.Style.FILL&#10;        }&#10;        canvas.drawCircle(radius, radius, radius, circlePaint)&#10;&#10;        val initials = extractInitials(name)&#10;        val textPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;            color = Color.WHITE&#10;            style = Paint.Style.FILL&#10;            textAlign = Paint.Align.CENTER&#10;            textSize = sizePx * 0.42f&#10;        }&#10;        val textBounds = android.graphics.Rect()&#10;        textPaint.getTextBounds(initials, 0, initials.length, textBounds)&#10;        val textY = radius - textBounds.exactCenterY()&#10;        canvas.drawText(initials, radius, textY, textPaint)&#10;    }&#10;&#10;    // Border&#10;    val borderPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;        color = Color.WHITE&#10;        style = Paint.Style.STROKE&#10;        strokeWidth = sizePx * 0.06f&#10;    }&#10;    // Inset a bit so stroke is fully inside&#10;    val inset = borderPaint.strokeWidth / 2&#10;    canvas.drawArc(RectF(inset, inset, sizePx - inset, sizePx - inset), 0f, 360f, false, borderPaint)&#10;&#10;    return output&#10;}&#10;&#10;@Composable&#10;fun rememberAvatarMarkerDescriptor(&#10;    imageUrl: String?,&#10;    name: String,&#10;    size: Dp = 48.dp,&#10;): BitmapDescriptor? {&#10;    val context = LocalContext.current&#10;    val density = LocalDensity.current&#10;    val (descriptor, setDescriptor) = remember(imageUrl, name) { mutableStateOf&lt;BitmapDescriptor?&gt;(null) }&#10;&#10;    LaunchedEffect(imageUrl, name) {&#10;        val sizePx = with(density) { size.roundToPx() }&#10;        val bmp = createCircularAvatarBitmap(context, imageUrl, name, sizePx)&#10;        setDescriptor(BitmapDescriptorFactory.fromBitmap(bmp))&#10;    }&#10;&#10;    return descriptor&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapShader&#10;import android.graphics.Canvas&#10;import android.graphics.Color&#10;import android.graphics.Paint&#10;import android.graphics.RectF&#10;import android.graphics.Shader&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.graphics.createBitmap&#10;import androidx.core.graphics.drawable.toBitmap&#10;import androidx.core.graphics.scale&#10;import androidx.core.graphics.toColorInt&#10;import coil.imageLoader&#10;import coil.request.ImageRequest&#10;import coil.request.SuccessResult&#10;import com.google.android.gms.maps.model.BitmapDescriptor&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory&#10;&#10;// --- Helpers for circular avatar map markers ---&#10;fun extractInitials(name: String): String {&#10;    val parts = name.trim().split(&quot; &quot;).filter { it.isNotBlank() }&#10;    val first = parts.getOrNull(0)?.firstOrNull()?.uppercaseChar()&#10;    val second = parts.getOrNull(1)?.firstOrNull()?.uppercaseChar()&#10;    return when {&#10;        first != null &amp;&amp; second != null -&gt; &quot;$first$second&quot;&#10;        first != null -&gt; first.toString()&#10;        else -&gt; &quot;?&quot;&#10;    }&#10;}&#10;&#10;// Synchronous placeholder (no network): initials on a colored circle with border&#10;fun createInitialsAvatarBitmap(&#10;    name: String,&#10;    sizePx: Int,&#10;): Bitmap {&#10;    val output = createBitmap(sizePx, sizePx)&#10;    val canvas = Canvas(output)&#10;    val radius = sizePx / 2f&#10;&#10;    // Background circle fill&#10;    val circlePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;        color = &quot;#2196F3&quot;.toColorInt() // blue-ish&#10;        style = Paint.Style.FILL&#10;    }&#10;    canvas.drawCircle(radius, radius, radius, circlePaint)&#10;&#10;    // Initials text&#10;    val initials = extractInitials(name)&#10;    val textPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;        color = Color.WHITE&#10;        style = Paint.Style.FILL&#10;        textAlign = Paint.Align.CENTER&#10;        textSize = sizePx * 0.42f&#10;    }&#10;    val textBounds = android.graphics.Rect()&#10;    textPaint.getTextBounds(initials, 0, initials.length, textBounds)&#10;    val textY = radius - textBounds.exactCenterY()&#10;    canvas.drawText(initials, radius, textY, textPaint)&#10;&#10;    // White border&#10;    val borderPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;        color = Color.WHITE&#10;        style = Paint.Style.STROKE&#10;        strokeWidth = sizePx * 0.06f&#10;    }&#10;    val inset = borderPaint.strokeWidth / 2&#10;    canvas.drawArc(RectF(inset, inset, sizePx - inset, sizePx - inset), 0f, 360f, false, borderPaint)&#10;&#10;    return output&#10;}&#10;&#10;suspend fun createCircularAvatarBitmap(&#10;    context: android.content.Context,&#10;    imageUrl: String?,&#10;    name: String,&#10;    sizePx: Int,&#10;): Bitmap {&#10;    val loader = context.imageLoader&#10;    val drawableBitmap: Bitmap? = try {&#10;        if (!imageUrl.isNullOrBlank()) {&#10;            val request = ImageRequest.Builder(context)&#10;                .data(imageUrl)&#10;                .size(sizePx)&#10;                .allowHardware(false)&#10;                .build()&#10;            val result = loader.execute(request)&#10;            val drawable = (result as? SuccessResult)?.drawable&#10;            drawable?.toBitmap(width = sizePx, height = sizePx)&#10;        } else null&#10;    } catch (_: Exception) {&#10;        null&#10;    }&#10;&#10;    // Prepare paints&#10;    val output = createBitmap(sizePx, sizePx)&#10;    val canvas = Canvas(output)&#10;    val radius = sizePx / 2f&#10;&#10;    // Background circle (slight gray)&#10;    val bgPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;        color = &quot;#F0F0F0&quot;.toColorInt()&#10;        style = Paint.Style.FILL&#10;    }&#10;    canvas.drawCircle(radius, radius, radius, bgPaint)&#10;&#10;    if (drawableBitmap != null) {&#10;        val scaled = if (drawableBitmap.width != sizePx || drawableBitmap.height != sizePx) {&#10;            drawableBitmap.scale(sizePx, sizePx)&#10;        } else drawableBitmap&#10;&#10;        val paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;            shader = BitmapShader(scaled, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP)&#10;        }&#10;        canvas.drawCircle(radius, radius, radius, paint)&#10;    } else {&#10;        // Fallback: initials&#10;        val circlePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;            color = &quot;#2196F3&quot;.toColorInt() // blue-ish&#10;            style = Paint.Style.FILL&#10;        }&#10;        canvas.drawCircle(radius, radius, radius, circlePaint)&#10;&#10;        val initials = extractInitials(name)&#10;        val textPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;            color = Color.WHITE&#10;            style = Paint.Style.FILL&#10;            textAlign = Paint.Align.CENTER&#10;            textSize = sizePx * 0.42f&#10;        }&#10;        val textBounds = android.graphics.Rect()&#10;        textPaint.getTextBounds(initials, 0, initials.length, textBounds)&#10;        val textY = radius - textBounds.exactCenterY()&#10;        canvas.drawText(initials, radius, textY, textPaint)&#10;    }&#10;&#10;    // Border&#10;    val borderPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {&#10;        color = Color.WHITE&#10;        style = Paint.Style.STROKE&#10;        strokeWidth = sizePx * 0.06f&#10;    }&#10;    // Inset a bit so stroke is fully inside&#10;    val inset = borderPaint.strokeWidth / 2&#10;    canvas.drawArc(RectF(inset, inset, sizePx - inset, sizePx - inset), 0f, 360f, false, borderPaint)&#10;&#10;    return output&#10;}&#10;&#10;@Composable&#10;fun rememberAvatarMarkerDescriptor(&#10;    imageUrl: String?,&#10;    name: String,&#10;    size: Dp = 48.dp,&#10;): BitmapDescriptor? {&#10;    val context = LocalContext.current&#10;    val density = LocalDensity.current&#10;    // Compute size first to build an immediate placeholder&#10;    val sizePx = with(density) { size.roundToPx() }&#10;&#10;    // Create a non-null placeholder immediately to avoid default red marker flicker&#10;    val initialPlaceholder = remember(name, sizePx) {&#10;        BitmapDescriptorFactory.fromBitmap(createInitialsAvatarBitmap(name, sizePx))&#10;    }&#10;&#10;    val (descriptor, setDescriptor) = remember(imageUrl, name, sizePx) {&#10;        mutableStateOf&lt;BitmapDescriptor?&gt;(initialPlaceholder)&#10;    }&#10;&#10;    LaunchedEffect(imageUrl, name, sizePx) {&#10;        val bmp = createCircularAvatarBitmap(context, imageUrl, name, sizePx)&#10;        setDescriptor(BitmapDescriptorFactory.fromBitmap(bmp))&#10;    }&#10;&#10;    return descriptor&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/map/components/SpotDetailsBottomSheet.kt" />
              <option name="originalContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.domain.model.User&#10;import rs.gospaleks.waterspot.presentation.components.CleanlinessChip&#10;import rs.gospaleks.waterspot.R&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    selectedSpotId: String? = null,&#10;    onDismiss: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onLoadSpotDetails: (String) -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    LaunchedEffect(selectedSpotId) {&#10;        selectedSpotId?.let { spotId -&gt;&#10;            // Mala pauza da se animacija otvaranja završi&#10;            delay(200)&#10;            onLoadSpotDetails(spotId)&#10;        }&#10;    }&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading || spotDetails == null) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight(0.5f)&#10;                        .fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center,&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                SpotDetailsContent(&#10;                    spotDetails = spotDetails,&#10;                    onNavigateClick = onNavigateClick,&#10;                    onReviewClick = onReviewClick,&#10;                    onUserProfileClick = onUserProfileClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotDetailsContent(&#10;    spotDetails: SpotDetails,&#10;    onReviewClick: () -&gt; Unit = {},&#10;    onNavigateClick: () -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Photo&#10;        spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;            AsyncImage(&#10;                model = photoUrl,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .aspectRatio(4f / 3f)&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Header with type and date&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Type with icon&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = spotDetails.spot.type.icon(),&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;&#10;            // Cleanliness chip&#10;            CleanlinessChip(&#10;                cleanliness = spotDetails.spot.cleanliness,&#10;                modifier = Modifier.wrapContentWidth()&#10;            )&#10;        }&#10;&#10;        // Description&#10;        spotDetails.spot.description?.let { description -&gt;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = description,&#10;                modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;&#10;        // Clickable user info&#10;        spotDetails.user?.let { user -&gt;&#10;            PostedByCard(user, onUserProfileClick)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Action buttons&#10;        ActionsButtons(&#10;            onNavigateClick = onNavigateClick,&#10;            onReviewClick = onReviewClick&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PostedByCard(&#10;    user: User,&#10;    onUserProfileClick: () -&gt; Unit,&#10;) {&#10;    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;    Card(&#10;        onClick = onUserProfileClick,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            AsyncImage(&#10;                model = user.profilePictureUrl,&#10;                contentDescription = &quot;Profile picture&quot;,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = stringResource(R.string.spot_details_posted_by),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = user.fullName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionsButtons(&#10;    onNavigateClick: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;) {&#10;    Row(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Button(&#10;            onClick = onNavigateClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Navigation,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_navigate_button))&#10;        }&#10;&#10;        OutlinedButton(&#10;            onClick = onReviewClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Outlined.Report,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_review_button))&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.map.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.Navigation&#10;import androidx.compose.material.icons.outlined.Report&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import kotlinx.coroutines.delay&#10;import rs.gospaleks.waterspot.domain.model.SpotDetails&#10;import rs.gospaleks.waterspot.presentation.components.toDisplayName&#10;import rs.gospaleks.waterspot.presentation.components.icon&#10;import rs.gospaleks.waterspot.domain.model.User&#10;import rs.gospaleks.waterspot.presentation.components.CleanlinessChip&#10;import rs.gospaleks.waterspot.R&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SpotDetailsBottomSheet(&#10;    spotDetails: SpotDetails? = null,&#10;    isLoading: Boolean,&#10;    selectedSpotId: String? = null,&#10;    onDismiss: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;    onNavigateClick: () -&gt; Unit,&#10;    onLoadSpotDetails: (String) -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    LaunchedEffect(selectedSpotId) {&#10;        selectedSpotId?.let { spotId -&gt;&#10;            // Mala pauza da se animacija otvaranja završi&#10;            delay(200)&#10;            onLoadSpotDetails(spotId)&#10;        }&#10;    }&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss,&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            if (isLoading || spotDetails == null) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight(0.5f)&#10;                        .fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center,&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                SpotDetailsContent(&#10;                    spotDetails = spotDetails,&#10;                    onNavigateClick = onNavigateClick,&#10;                    onReviewClick = onReviewClick,&#10;                    onUserProfileClick = onUserProfileClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotDetailsContent(&#10;    spotDetails: SpotDetails,&#10;    onReviewClick: () -&gt; Unit = {},&#10;    onNavigateClick: () -&gt; Unit = {},&#10;    onUserProfileClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Photo&#10;        spotDetails.spot.photoUrl?.let { photoUrl -&gt;&#10;            AsyncImage(&#10;                model = photoUrl,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .aspectRatio(4f / 3f)&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Header with type and date&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Type with icon&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = spotDetails.spot.type.icon(),&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = spotDetails.spot.type.toDisplayName(),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;&#10;            // Cleanliness chip&#10;            CleanlinessChip(&#10;                cleanliness = spotDetails.spot.cleanliness,&#10;                modifier = Modifier.wrapContentWidth()&#10;            )&#10;        }&#10;&#10;        // Description&#10;        spotDetails.spot.description?.let { description -&gt;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = description,&#10;                modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;&#10;        // Clickable user info&#10;        spotDetails.user?.let { user -&gt;&#10;            PostedByCard(user, onUserProfileClick)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Action buttons&#10;        ActionsButtons(&#10;            onNavigateClick = onNavigateClick,&#10;            onReviewClick = onReviewClick&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PostedByCard(&#10;    user: User,&#10;    onUserProfileClick: () -&gt; Unit,&#10;) {&#10;    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;    Card(&#10;        onClick = onUserProfileClick,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            AsyncImage(&#10;                model = user.profilePictureUrl,&#10;                contentDescription = &quot;Profile picture&quot;,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = stringResource(R.string.spot_details_posted_by),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = user.fullName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowForward,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionsButtons(&#10;    onNavigateClick: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit,&#10;) {&#10;    Row(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Button(&#10;            onClick = onNavigateClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Navigation,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_navigate_button))&#10;        }&#10;&#10;        OutlinedButton(&#10;            onClick = onReviewClick,&#10;            modifier = Modifier.weight(1f),&#10;            contentPadding = PaddingValues(vertical = 12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Outlined.Report,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(18.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(text = stringResource(R.string.spot_details_review_button))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/profile/UserRank.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/rs/gospaleks/waterspot/presentation/screens/profile/UserRank.kt" />
              <option name="updatedContent" value="package rs.gospaleks.waterspot.presentation.screens.profile&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.EmojiEvents&#10;import androidx.compose.material.icons.filled.Explore&#10;import androidx.compose.material.icons.filled.Map&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import rs.gospaleks.waterspot.R&#10;&#10;enum class UserRank(&#10;    val minPoints: Int,&#10;    val maxPoints: Int?,&#10;    val color: Color,&#10;    val icon: @Composable () -&gt; Unit&#10;) {&#10;    Explorer(&#10;        0, 19,&#10;        Color(0xFF42A5F5),&#10;        { Icon(Icons.Filled.Explore, contentDescription = &quot;Explorer&quot;, tint = Color.White) }&#10;    ),&#10;    Contributor(&#10;        20, 59,&#10;        Color(0xFF66BB6A),&#10;        { Icon(Icons.Filled.Star, contentDescription = &quot;Contributor&quot;, tint = Color.White) }&#10;    ),&#10;    Scout(&#10;        60, 99,&#10;        Color(0xFFFFA726),&#10;        { Icon(Icons.Filled.Search, contentDescription = &quot;Scout&quot;, tint = Color.White) }&#10;    ),&#10;    Guide(&#10;        100, 199,&#10;        Color(0xFFAB47BC),&#10;        { Icon(Icons.Filled.Map, contentDescription = &quot;Guide&quot;, tint = Color.White) }&#10;    ),&#10;    WaterGuardian(&#10;        200, null,&#10;        Color(0xFFFFD700),&#10;        { Icon(Icons.Filled.EmojiEvents, contentDescription = &quot;Water Guardian&quot;, tint = Color.White) }&#10;    );&#10;&#10;    companion object {&#10;        fun fromPoints(points: Int): UserRank {&#10;            return entries.first { rank -&gt;&#10;                (points &gt;= rank.minPoints) &amp;&amp; (rank.maxPoints?.let { points &lt;= it } ?: true)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UserRank.toDisplayName(): String = stringResource(&#10;    when (this) {&#10;        UserRank.Explorer -&gt; R.string.rank_explorer&#10;        UserRank.Contributor -&gt; R.string.rank_contributor&#10;        UserRank.Scout -&gt; R.string.rank_scout&#10;        UserRank.Guide -&gt; R.string.rank_guide&#10;        UserRank.WaterGuardian -&gt; R.string.rank_water_guardian&#10;    }&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>